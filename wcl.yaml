openapi: 3.0.1

security:
  - ApiKeyAuth: []
  - XApiKeyAuth: []

servers:
  - description: Dev server
    url: https://dev.app.worldclass.ru/api/v1
  - description: Stage server
    url: https://stage.app.worldclass.ru/api/v1
  - description: Feature server
    url: https://feature.app.worldclass.ru/api/v1

# Available options: https://github.com/json-schema-faker/json-schema-faker/tree/master/docs#available-options
x-json-schema-faker:
  locale: ru
  min-items: 2
  max-items: 4
  resolve-json-path: true

info:
  title: WCL API
  version: 1.29.0
  description: |
    API для бэкэнда мобильного приложения World Class Lifystyle. https://stage.app.worldclass.ru/api/v1

    [Список изменений](https://worldclass.pages.redmadrobot.dev/backend/wcl/CHANGELOG_API.md)
tags:
  - name: "Авторизация"
  - name: "Профиль"
  - name: "Главная"
  - name: "Клубы"
  - name: "Расписание"
  - name: "Активности"
  - name: "История активностей"
  - name: "Избранное"
  - name: "Тренеры"
  - name: "Оплата"
  - name: "Направления бизнеса/фитнеса"
  - name: "Услуги"
  - name: "Пакеты услуг"
  - name: "Мероприятия"
  - name: "Онбординг"
  - name: "Отзывы"
  - name: "Сторис"
  - name: "Документы"
  - name: "Центр уведомлений"
  - name: "Интерфейс уведомлений для WCL"
  - name: "Системные методы"

paths:
  /auth:
    post:
      tags:
        - "Авторизация"
      summary: авторизация пользователя | WCL
      description: Регистрирует устройство и авторизует пользователя по номеру телефона
      operationId: createSession
      requestBody:
        $ref: "#/components/requestBodies/CreateSession"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSessionResponse"
        400:
          $ref: "#/components/responses/AuthClientError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        428:
          $ref: "#/components/responses/VersionUpdateRequired"
    delete:
      tags:
        - "Авторизация"
      summary: выход пользователя из системы | WCL
      description: Удаление токенов пользователя, деавторизация
      operationId: deleteSession
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                type: object
                properties: {}
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /auth/confirm:
    post:
      tags:
        - "Авторизация"
      operationId: confirmSession
      summary: подтверждение авторизации | WCL
      description: ввод пароля из смс, создание токенов доступа
      requestBody:
        $ref: "#/components/requestBodies/ConfirmSession"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfirmSessionResponse"
        400:
          description: |
            Коды ошибок:

                * AuthWrongCodeError - ошибка ввода кода
                
                * AuthExpiredCodeError - срок действия кода 
            
                * AuthCodeWasNotSentError - код не был получен пользователем
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        428:
          $ref: "#/components/responses/VersionUpdateRequired"
  /auth/refresh:
    post:
      tags:
        - "Авторизация"
      summary: обновление токена пользователя | WCL
      operationId: refreshSession
      requestBody:
        $ref: "#/components/requestBodies/RefreshSession"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        400:
          description: |
            Коды ошибок:

                * ValidationError - ошибка валидации входных данных
                * RefreshTimeOutExpiredError - ошибка времени жизни токена обновления
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /auth/change:
    post:
      tags:
        - "Авторизация"
      security:
        - ApiKeyAuth: []
      operationId: changeSession
      summary: смена аккаунта на связанный | WCL
      description: Получение нового токена и профиля для связанного аккаунта
      requestBody:
        $ref: "#/components/requestBodies/ChangeSession"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangeSessionResponse"
        400:
          description: |
            Коды ошибок:

                * ValidationError - ошибка валидации входных данных
                * AccessRestrictionError - ошибка прав доступа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /auth/info:
    get:
      tags:
        - "Авторизация"
      operationId: authInfo
      summary: Информация о сетях, городах и кодах стран для входа | WCL
      responses:
        200:
          description: Список сетей и кодов стран
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthInfo"
        428:
          $ref: "#/components/responses/VersionUpdateRequired"

  /auth/holding-code:
    get:
      tags:
        - "Авторизация"
      summary: Holding Code для зала | WCL
      operationId: getHoldingCode
      parameters:
        - name: chainCode
          in: query
          description: Идентификатор сети
          required: true
          schema:
            type: integer
      responses:
        200:
          description: код холдинга
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HoldingCode"
        428:
          $ref: "#/components/responses/VersionUpdateRequired"

  /schedules:
    get:
      tags:
        - "Расписание"
      operationId: schedules
      summary: Расписание для записи на тренировки | WCL
      description: Получение расписания
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: chainCode
          in: query
          description: Идентификатор сети
          schema:
            type: integer
            default: 1
        - $ref: "#/components/parameters/GymUid"
        - $ref: "#/components/parameters/GymUids"
        - $ref: "#/components/parameters/TrainerId"
        - $ref: "#/components/parameters/TrainerIds"
        - $ref: "#/components/parameters/ServiceId"
        - $ref: "#/components/parameters/ServiceIds"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleResponse"
        403:
          $ref: "#/components/responses/ForbiddenError"
        428:
          $ref: "#/components/responses/VersionUpdateRequired"

  /schedules/filters:
    post:
      tags:
        - "Расписание"
      operationId: createSchedulesFilters
      summary: Создание персональных фильтров для расписаний | DB
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/SchedulesFilters"
      responses:
        201:
          description: Данные сохранены
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        400:
          $ref: "#/components/responses/BadRequestError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /clubs:
    get:
      tags:
        - "Клубы"
      summary: Список клубов заданной сети | WCL
      description: Данный метод пришел на замену методу /gyms
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: chainCode
          in: query
          description: идентификатор сети
          required: true
          schema:
            type: integer
            default: 1
        - name: membershipId
          in: query
          description: идентификатор абонемента
          required: false
          example: cc35e9b9-d155-11e4-80d1-005056810138
          schema:
            type: string
            format: uuid
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
        - name: available
          in: query
          description: фильтровать по доступности для посещения по абонементу
          required: false
          schema:
            type: boolean
            default: false

        - name: types
          in: query
          description: типы клуба для фильтрации
          schema:
            type: array
            items:
              type: string
              enum:
                - gym
                - online
                - studio
                - outdoor
          style: form
          explode: false
          examples:
            oneType:
              summary: Пример для одного типа
              value: [ gym ] # ?type=gym
            multipleTypes:
              summary: Пример для нескольких типов
              value: [ gym, outdoor ] # ?types=gym,outdoor
      responses:
        200:
          description: Список клубов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClubList"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        428:
          $ref: "#/components/responses/VersionUpdateRequired"

  /clubs/main:
    get:
      tags:
        - "Клубы"
      summary: Список основных клубов заданной сети | WCL
      description: Список клубов относящиеся к основному клубу и с признаком liked
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: chainCode
          in: query
          description: идентификатор сети
          required: true
          schema:
            type: integer
            default: 1
        - name: types
          in: query
          description: типы клуба для фильтрации
          schema:
            type: array
            items:
              type: string
              enum:
                - gym
                - online
                - studio
                - outdoor
          style: form
          explode: false
          examples:
            oneType:
              summary: Пример для одного типа
              value: [ gym ] # ?type=gym
            multipleTypes:
              summary: Пример для нескольких типов
              value: [ gym, outdoor ] # ?types=gym,outdoor
      responses:
        200:
          description: Список клубов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClubList"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        428:
          $ref: "#/components/responses/VersionUpdateRequired"

  /gyms/{gymUid}:
    get:
      tags:
        - "Клубы"
      summary: Карточка клуба | WCL
      parameters:
        - $ref: "#/components/parameters/Gym-Uid"
      responses:
        200:
          description: Детальная информация по клубу
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GymInfo"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /gyms/{gymUid}/liked:
    post:
      tags:
        - "Клубы"
        - "Избранное"
      summary: Пометить клуб понравившемся | DB
      operationId: postGymsGymUIDLiked
      description: | 
        Связываем авторизованного пользователя и переданного ID клуба
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/Gym-Uid"
      responses:
        200:
          description: Результат простановки признака liked у клуба
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /gyms/{gymUid}/unliked:
    post:
      tags:
        - "Клубы"
        - "Избранное"
      summary: Снять пометку понравившегося клуба | DB
      operationId: postGymsGymUIDUnliked
      description: |
        Удаляем связку авторизованного пользователя и переданного ID клуба
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/Gym-Uid"
      responses:
        200:
          description: Результат удаления признака liked у клуба
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /gyms/liked:
    get:
      tags:
        - "Клубы"
        - "Избранное"
      summary: Список понравившихся клубов | DB
      description: Список ранее выбранных понравившихся клубов отсортированных по дате добавления в избранное
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClubList"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /gyms/favorites:
    post:
      tags:
        - "Клубы"
      summary: Выбрать клубы | DB
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/FavoriteGyms"
      responses:
        201:
          description: Данные сохранены
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        400:
          $ref: "#/components/responses/BadRequestError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /gyms/{gymUid}/workouts/{docId}/register:
    post:
      tags:
        - "Расписание"
      operationId: reserveSchedule
      summary: Запись на групповую тренировку | WCL
      description: Запись на групповую тренировку
      parameters:
        - $ref: "#/components/parameters/Gym-Uid"
        - $ref: "#/components/parameters/DocId"
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReserveScheduleResponse"
        400:
          description: |
            Коды ошибок:

                * InvalidAge - неверный возраст
            
                * GymNotAllowed - нет доступа в указанный клуб
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
    delete:
      tags:
        - "Расписание"
      operationId: cancelSchedule
      summary: Отмена записи на групповую тренировку из расписания | WCL
      description: Отмена записи на групповую тренировку из расписания, возвращает объект расписания
      parameters:
        - $ref: "#/components/parameters/Gym-Uid"
        - $ref: "#/components/parameters/DocId"
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelScheduleResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /gyms/{gymUid}/workouts/{docId}/reschedule:
    get:
      tags:
        - "Расписание"
      operationId: reschedules
      summary: Получение свободных дат для переноса тренировки
      description: Получение свободных дат для переноса тренировки
      parameters:
        - $ref: "#/components/parameters/Gym-Uid"
        - $ref: "#/components/parameters/DocId"
        - $ref: "#/components/parameters/ServiceIdRequired"
        - $ref: "#/components/parameters/TrainerId"
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleResponse"

  /gyms/{gymUid}/workouts/{docId}:
    delete:
      tags:
        - "Расписание"
      operationId: cancelActivity
      summary: Отмена записи на любую тренировку из активностей | WCL
      description: Отмена записи на любую тренировку. Возвращает только статус операции
      parameters:
        - $ref: "#/components/parameters/Gym-Uid"
        - $ref: "#/components/parameters/DocId"
        - name: type
          in: query
          required: true
          description: тип тренировки
          schema:
            $ref: "#/components/schemas/ServiceType"
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericStatusResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /gyms/{gymUid}/workouts/personal:
    post:
      tags:
        - "Расписание"
      operationId: personal
      summary: Запись на персональную тренировку | WCL
      description: Запись на персональную тренировку
      parameters:
        - $ref: "#/components/parameters/Gym-Uid"
      requestBody:
        $ref: "#/components/requestBodies/PersonalBody"
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonalResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /profile:
    get:
      tags:
        - "Профиль"
      operationId: getProfile
      summary: Получение профиля пользователя | WCL
      description: Получение информации о профиле пользователя
      security:
        - ApiKeyAuth: []
      parameters: []
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        428:
          $ref: "#/components/responses/VersionUpdateRequired"
    put:
      tags:
        - "Профиль"
      operationId: updateProfile
      summary: Обновление профиля | WCL
      description: Обновление профиля
      security:
        - ApiKeyAuth: []
      requestBody:
        $ref: "#/components/requestBodies/UpdateProfile"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateProfileResponse"
        403:
          $ref: "#/components/responses/ForbiddenError"
    delete:
      tags:
        - "Профиль"
      operationId: deleteProfile
      summary: удаление данных аккаунта пользователя | WCL
      description: Удаление данных аккаунта пользователя
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Данные для удаления переданы в 1с
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /profile/rating:
    get:
      tags:
        - "Профиль"
      operationId: userRating
      security:
        - ApiKeyAuth: []
      parameters: []
      summary: Возвращает текущий рейтинг клиента и описания программы лояльности | WCL
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRatings"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /profile/objectives:
    get:
      tags:
        - "Профиль"
      operationId: userObjectives
      security:
        - ApiKeyAuth: []
      parameters: []
      summary: Возвращает список целей клиента | WCL
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserObjectives"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
    put:
      tags:
        - "Профиль"
      operationId: setUserObjectives
      security:
        - ApiKeyAuth: []
      parameters: []
      requestBody:
        $ref: "#/components/requestBodies/SetObjectives"
      summary: Изменение целей клиентов | WCL
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetUserObjectiveResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /profile/memberships:
    get:
      tags:
        - "Профиль"
      operationId: userMemberships
      security:
        - ApiKeyAuth: [ ]
      parameters: [ ]
      summary: Список абонементов пользователя | WCL
      description: >-
        Метод возвращает список оформленных абонементов, по которым не истех
        срок и где пользователь является клиентом или владельцем
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserMemberships"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /profile/memberships/{membershipId}:
    get:
      tags:
        - "Профиль"
      operationId: userMembership
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: membershipId
          in: path
          description: идентификатор абонемента
          required: true
          example: cc35e9b9-d155-11e4-80d1-005056810138
          schema:
            type: string
            format: uuid
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
      summary: Детальная информация об абонементе пользователя | WCL
      description: >-
        Метод возвращает детальную информацию об оформленном абонементе вместе с информацией об услугах и подарках
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserMembershipDetails"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /profile/balance:
    get:
      tags:
        - "Профиль"
      operationId: getProfileBalance
      summary: Получение баланса пользователя | WCL
      description: "Получение информации о балансе пользователя"
      security:
        - ApiKeyAuth: []
      parameters: []
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileBalanceResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /profile/linked-accounts:
    get:
      tags:
        - "Профиль"
      operationId: getLinkedAccounts
      summary: Получение связанных аккаунтов | WCL
      description: |
        Список связанных аккаунтов. Дочерний аккаунт может быть привязан к нескольким основным. 
        Например: аккаунт дочери, будет привязан как дочерний к аккаунту мамы и отдельно к аккаунту папы.
        Также отображаем баланс на счете для каждого связанного аккаунта
      security:
        - ApiKeyAuth: [ ]
      parameters: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkedAccountsResponse"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /profile/settings:
    get:
      tags:
        - "Профиль"
      operationId: getProfileSettings
      summary: Получение настроек | WCL
      description: |
        Список текущих настроек пользователя
      security:
        - ApiKeyAuth: [ ]
      parameters: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileSettingsResponse"
        403:
          $ref: "#/components/responses/ForbiddenError"
    put:
      tags:
        - "Профиль"
      operationId: updateProfileSettings
      summary: Обновление настроек | WCL
      description: |
        Изменение настроек приложения для конкретного пользователя
      security:
        - ApiKeyAuth: []
      requestBody:
        $ref: "#/components/requestBodies/UpdateProfileSettings"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateProfileSettingsResponse"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /profile/docs:
    get:
      tags:
        - "Профиль"
        - "Документы"
      operationId: getProfileDocs
      summary: Получение документов пользователя | WCL
      description: |
        Список подписанных документов клиента
      security:
        - ApiKeyAuth: []
      parameters: []
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileDocsResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /profile/dashboard:
    get:
      summary: Дашборд с информацией по пользователю для виджетов на главной | WCL
      description: |-
        Возвращает информацию по клубным картам пользователя, статус, счетчики услуг и избранного
      security:
        - ApiKeyAuth: [ ]
      tags:
        - "Профиль"
      responses:
        200:
          description: Информация по клубным картам пользователя, статус и баннеры
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileDashboard"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /profile/liked:
    get:
      tags:
        - "Профиль"
        - "Избранное"
      summary: Список понравившихся клубов, тренеров и услуг | DB
      description: |
        Список ранее выбранных понравившихся клубов, тренеров и услуг отсортированных по ФИО или Наименованию
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: limit
          in: query
          description: лимит количества вывода записей по каждой сущности
          schema:
            description: Количество записей
            type: integer
            example: 10
            default: 3
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileLikedResponse"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /documents/{membershipId}:
    get:
      tags:
        - "Документы"
      operationId: getDocument
      summary: Получение документа пользователя по контракту | WCL
      description: |
        Получение конкретного документа по контракту (клубной карте) для подписи | WCL
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: membershipId
          in: path
          description: идентификатор абонемента
          required: true
          example: cc35e9b9-d155-11e4-80d1-005056810138
          schema:
            type: string
            format: uuid
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDocumentResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /documents/{membershipId}/sign:
    post:
      tags:
        - "Документы"
      operationId: signDocument
      summary: Подпись документа по контракту | WCL
      description: |
        Подпись конкретного документа по контракту (клубной карте) пользователем | WCL
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: membershipId
          in: path
          description: идентификатор абонемента
          required: true
          example: cc35e9b9-d155-11e4-80d1-005056810138
          schema:
            type: string
            format: uuid
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /trainers:
    get:
      tags:
        - "Тренеры"
      operationId: getTrainerList
      summary: Получение списка тренеров | WCL
      description: Список тренеров
      parameters:
        - name: chainCode
          in: query
          description: фильтр по коду сети
          schema:
            type: integer
            description: код сети
            example: 1
        - name: limit
          in: query
          description: ограничение количества выводимых записей
          schema:
            type: integer
            description: количество записей
            example: 10
        - $ref: "#/components/parameters/GymUid"
        - $ref: "#/components/parameters/Direction"
        - name: type
          in: query
          description: фильтр по типу клуба
          schema:
            type: string
            description: тип клуба
            enum:
              - gym
              - online
              - studio
              - outdoor
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainersResponse"

  /trainers/{trainerId}:
    get:
      tags:
        - "Тренеры"
      operationId: getTrainerCard
      summary: Получение карточки тренера | WCL
      description: Карточка тренера
      parameters:
        - name: trainerId
          in: path
          required: true
          description: id тренера
          example: cc35e9b9-d155-11e4-80d1-005056810138
          schema:
              type: string
              format: uuid
        - name: gymUID
          in: query
          description: id клуба
          example: cc35e9b9-d155-11e4-80d1-005056810138
          schema:
            type: string
            format: uuid
        - name: chainCode
          in: query
          description: код сети
          example: 1
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainerCard"

  /trainers/{trainerId}/liked:
    post:
      tags:
        - "Тренеры"
        - "Избранное"
      operationId: PostTrainersTrainerIDLiked
      summary: Пометить тренера понравившемся | DB
      description: |
        Связываем авторизованного пользователя и переданного ID тренера
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: trainerId
          in: path
          required: true
          description: id тренера
          example: cc35e9b9-d155-11e4-80d1-005056810138
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Результат простановки признака liked у тренера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /trainers/{trainerId}/unliked:
    post:
      tags:
        - "Тренеры"
        - "Избранное"
      operationId: PostTrainersTrainerIDUnliked
      summary: Снять пометку понравившегося тренера | DB
      description: |
        Удаляем связку авторизованного пользователя и переданного ID тренера
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: trainerId
          in: path
          required: true
          description: id тренера
          example: cc35e9b9-d155-11e4-80d1-005056810138
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Результат удаления признака liked у тренера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /trainers/liked:
    get:
      tags:
        - "Тренеры"
        - "Избранное"
      summary: Список понравившихся тренеров | DB + WCL
      description: Список ранее выбранных понравившихся тренеров отсортированных по дате добавления в избранное
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainersLikedResponse"

  /trainers/date:
    get:
      tags:
        - "Тренеры"
      operationId: getTrainerFreeDateList
      summary: Получение списка свободных дат для персональной записи | WCL
      description: Список свободных дат для персональной записи
      parameters:
        - $ref: "#/components/parameters/GymUidRequired"
        - $ref: "#/components/parameters/TrainerId"
        - $ref: "#/components/parameters/ServiceUid"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainersFreeDateResponse"
  /trainers/services:
    get:
      tags:
        - "Тренеры"
      operationId: getTrainerServicesList
      summary: Получение списка услуг для персональной записи | WCL
      description: Список услуг для персональной записи
      parameters:
        - $ref: "#/components/parameters/GymUidRequired"
        - $ref: "#/components/parameters/TrainerId"
        - name: date
          in: query
          description: Дата услуги
          required: false
          schema:
            type: string
            example: "2022-06-10T00:00:00"
            format: date-time
            maxLength: 36
        - name: services
          in: query
          description: Массив идентификаторов услуг
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: uidDescription
          in: query
          description: id описания услуги
          required: false
          schema:
            type: string
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainersServicesResponse"

  /trainers/services/group:
    get:
      tags:
        - "Тренеры"
      operationId: getTrainerServicesByGroup
      summary: Получение списка услуг для персональной записи сгруппированных по имени | WCL
      description: Список услуг для персональной записи
      parameters:
        - $ref: "#/components/parameters/GymUidRequired"
        - $ref: "#/components/parameters/TrainerId"
        - name: date
          in: query
          description: Дата услуги
          required: false
          schema:
            type: string
            example: "2022-06-10T00:00:00"
            format: date-time
            maxLength: 36
        - name: services
          in: query
          description: Массив идентификаторов услуг
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: uidDescription
          in: query
          description: id описания услуги
          required: false
          schema:
            type: string
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainersServicesByGroupResponse"

  /trainers/personals:
    get:
      tags:
        - "Тренеры"
      operationId: getTrainerPersonalList
      summary: Получение списка тренеров для персональной записи | WCL
      description: Список тренеров для персональной записи
      parameters:
        - $ref: "#/components/parameters/GymUid"
        - $ref: "#/components/parameters/ServiceUid"
        - $ref: "#/components/parameters/ServiceUids"
        - name: date
          in: query
          description: Дата услуги
          required: false
          schema:
            type: string
            example: "2022-06-10T00:00:00"
            format: date-time
            maxLength: 36
        - $ref: "#/components/parameters/DirectionOptional"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainersResponse"
  /trainers/top:
    get:
      tags:
        - "Тренеры"
      operationId: getTopTrainerList
      summary: Получение топ-3 списка тренеров | WCL
      description: Список из трех тренеров
      parameters:
        - name: chainCode
          in: query
          description: код сети
          schema:
            type: integer
          required: true
        - $ref: "#/components/parameters/Direction"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainersResponse"

  /favorite_gyms/trainers:
    get:
      summary: список тренеров из избранных клубов | WCL
      description: получить тренеров из избранных клубов
      operationId: getTrainersFromFavoriteGyms
      tags:
        - "Тренеры"
      security:
        - ApiKeyAuth: [ ]
      parameters: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainersFromFavoriteGymResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /prebooking/trainer:
    get:
      tags:
        - "Тренеры"
      operationId: getPrebookingForTrainer
      summary: Получение списка услуг-слотов для персональной записи к тренеру | WCL
      description: Список услуг-слотов для персональной записи к тренеру
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/GymIdRequired"
        - $ref: "#/components/parameters/ServiceEntryId"
        - $ref: "#/components/parameters/TrainerIdRequired"
        - name: date
          in: query
          description: Дата и время оказания услуги
          required: false
          schema:
            type: string
            example: "2022-06-10T00:00:00"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrebookingResponse"

  /prebooking/service:
    get:
      tags:
        - "Услуги"
      operationId: getPrebookingForService
      summary: Получение списка тренеров-слотов для персональной записи на услугу | WCL
      description: Список тренеров-слотов для персональной записи на услугу
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/GymIdRequired"
        - $ref: "#/components/parameters/ServiceIdRequired"
        - $ref: "#/components/parameters/ServiceEntryId"
        - $ref: "#/components/parameters/TrainerId"
        - name: date
          in: query
          description: Дата и время оказания услуги
          required: false
          schema:
            type: string
            example: "2022-06-10T00:00:00"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrebookingResponse"

  /prebooking/onboard:
    get:
      tags:
        - "Услуги"
      operationId: getPrebookingForOnboard
      summary: Получение списка тренеров-слотов для персональной записи на услугу | WCL
      description: Список тренеров-слотов для персональной записи на услугу
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/GymIdRequired"
        - $ref: "#/components/parameters/ServiceIdRequired"
        - $ref: "#/components/parameters/ServiceEntryIdRequired"
        - $ref: "#/components/parameters/TrainerId"
        - name: date
          in: query
          description: Дата и время оказания услуги
          required: false
          schema:
            type: string
            example: "2022-06-10T00:00:00"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrebookingResponse"

  /prebooking:
    post:
      tags:
        - "Тренеры"
        - "Услуги"
      operationId: postPrebooking
      summary: Персональная запись на услугу | WCL
      description: Персональная запись на услугу
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/PrebookingBody"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrebookingReserveResponse"

  /main/banners:
    get:
      summary: список баннеров главной страницы | WCL
      operationId: getBanners
      description: |-
        По коду сети возвращает список баннеров фото и видео контента
        Появляется баннер с необходимостью обновиться при
      security:
        - ApiKeyAuth: [ ]
      tags:
        - "Главная"
      parameters:
        - name: chainCode
          in: query
          description: идентификатор сети
          schema:
            type: integer
      responses:
        200:
          description: Список баннеров для главной страницы
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BannerList"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /main/ball:
    get:
      summary: шар активности на главной | WCL
      security:
        - ApiKeyAuth: [ ]
      operationId: getActivityBall
      description: |-
        рассчитывает статистику активности пользователя и возвращает компоненты для отрисовки виджета
      tags:
        - "Активности"
      responses:
        200:
          description: Описание шара активности
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityBall"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /main/stats:
    get:
      summary: статистика пользователя | WCL
      security:
        - ApiKeyAuth: [ ]
      operationId: getStats
      description: |-
        рассчитывает статистику активности пользователя и возвращает компоненты для отрисовки виджета.
        так же в объект включены подсказки
      tags:
        - "Активности"
      responses:
        200:
          description: шар активности + подсказка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityStat"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /activities:
    get:
      operationId: getActivitiesHistory
      summary: история активностей пользователя | DB
      description: |-
        отображает список всех активностей пользователя за указанный период
      tags:
        - "Активности"
        - "История активностей"
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: startDate
          in: query
          description: дата начала (применяется только совместно с endDate)
          schema:
            type: string
            pattern: "[0-9]{4}-(0[0-9]|10|11|12)-([0-2][0-9]|30|31)T[0-9]{2}:[0-9]{2}:[0-9]{2}"
            example: "2022-06-01T00:00:00"
        - name: endDate
          in: query
          description: дата окончания (применяется только совместно с startDate)
          schema:
            type: string
            pattern: "[0-9]{4}-(0[0-9]|10|11|12)-([0-2][0-9]|30|31)T[0-9]{2}:[0-9]{2}:[0-9]{2}"
            example: "2022-06-30T00:00:00"
        - name: filterTypes
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ActivityTypeHistoryFilter"
          style: form
          explode: false
          examples:
            multipleTypes:
              summary: Пример для нескольких типов
              value: [ self, personal ] # ?filterTypes=self,personal
        - name: filterObjectives
          in: query
          schema:
            $ref: "#/components/schemas/ActivityObjectivesHistoryFilter"
          style: form
          explode: false
          examples:
            multipleTypes:
              summary: Пример для нескольких значений
              value: [ uuid1, uuid2 ] # ?filterTrainers=uuid1,uuid2
        - name: filterPayment
          in: query
          schema:
            $ref: "#/components/schemas/ActivityPaymentTypeHistoryFilter"
        - name: filterTrainers
          in: query
          schema:
            $ref: "#/components/schemas/ActivityTrainersHistoryFilter"
          style: form
          explode: false
          examples:
            multipleTypes:
              summary: Пример для нескольких значений
              value: [ uuid1, uuid2 ] # ?filterTrainers=uuid1,uuid2
        - name: filterServices
          in: query
          schema:
            $ref: "#/components/schemas/ActivityServicesHistoryFilter"
          style: form
          explode: false
          examples:
            multipleTypes:
              summary: Пример для нескольких значений
              value: [ uuid1, uuid2 ] # ?filterServices=uuid1,uuid2
        - name: limit
          in: query
          description: лимит числа записей
          schema:
            $ref: "#/components/schemas/Limit"
        - name: offset
          in: query
          description: смещение записей в выдаче
          schema:
            $ref: "#/components/schemas/Offset"

      responses:
        200:
          description: Список активностей пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivitiesResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /activities/services:
    get:
      operationId: getActivitiesHistoryServices
      tags:
        - "История активностей"
      summary: Получение списка услуг (названий активностей) из истории активностей | DB
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: startDate
          in: query
          description: дата начала (применяется только совместно с endDate)
          schema:
            type: string
            pattern: "[0-9]{4}-(0[0-9]|10|11|12)-([0-2][0-9]|30|31)T[0-9]{2}:[0-9]{2}:[0-9]{2}"
            example: "2022-06-01T00:00:00"
        - name: endDate
          in: query
          description: дата окончания (применяется только совместно с startDate)
          schema:
            type: string
            pattern: "[0-9]{4}-(0[0-9]|10|11|12)-([0-2][0-9]|30|31)T[0-9]{2}:[0-9]{2}:[0-9]{2}"
            example: "2022-06-30T00:00:00"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivitiesHistoryServices"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /activities/trainers:
    get:
      operationId: getActivitiesHistoryTrainers
      tags:
        - "История активностей"
      summary: Получение списка тренеров (названий активностей) из истории активностей | DB
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: startDate
          in: query
          description: дата начала (применяется только совместно с endDate)
          schema:
            type: string
            pattern: "[0-9]{4}-(0[0-9]|10|11|12)-([0-2][0-9]|30|31)T[0-9]{2}:[0-9]{2}:[0-9]{2}"
            example: "2022-06-01T00:00:00"
        - name: endDate
          in: query
          description: дата окончания (применяется только совместно с startDate)
          schema:
            type: string
            pattern: "[0-9]{4}-(0[0-9]|10|11|12)-([0-2][0-9]|30|31)T[0-9]{2}:[0-9]{2}:[0-9]{2}"
            example: "2022-06-30T00:00:00"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivitiesHistoryTrainers"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /activities/planned:
    get:
      summary: список запланированных активностей пользователя | WCL
      security:
        - ApiKeyAuth: [ ]
      description: |-
        отображает список всех активностей пользователя за период, начиная с текущего момента
      tags:
        - "Активности"
      parameters:
        - name: endDate
          in: query
          description: дата окончания
          schema:
            type: string
            pattern: "[0-9]{4}-(0[0-9]|10|11|12)-([0-2][0-9]|30|31)T[0-9]{2}:[0-9]{2}:[0-9]{2}"
            example: "2022-06-30T00:00:00"
            maxLength: 36
        - name: limit
          in: query
          description: лимит числа записей
          schema:
            type: integer
      responses:
        200:
          description: Список активностей пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivitiesPlannedResponse"
        400:
          description: |
            Коды ошибок:

                * InvalidEndDate - endDate должна быть в будущем
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"


  /activities/{activityID}/club:
    get:
      summary: карточка активности в клубе | DB
      security:
        - ApiKeyAuth: []
      description: |-
        Возвращает описание активности в клубе
      tags:
        - "Активности"
      parameters:
        - $ref: "#/components/parameters/ActivityID"
        - name: docType
          in: query
          description: Тип документа
          required: true
          example: personal
          schema:
            type: string
            enum:
              - personal
              - group
              - visit
              - guestVisit
      responses:
        200:
          description: Карточка мероприятия
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventInfo"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /activities/{activityID}/self:
    get:
      summary: карточка активности пользователя | DB
      security:
        - ApiKeyAuth: [ ]
      description: |-
        Возвращает описание самостоятельной активности
      tags:
        - "Активности"
      parameters:
        - $ref: "#/components/parameters/ActivityID"
      responses:
        200:
          description: Карточка активности
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SelfActivityResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
    put:
      summary: редактирование карточки активности пользователя | DB
      security:
        - ApiKeyAuth: [ ]
      description: |-
        Редактирует описание самостоятельной активности
      tags:
        - "Активности"
      parameters:
        - $ref: "#/components/parameters/ActivityID"
      requestBody:
        $ref: "#/components/requestBodies/UserSelfActivityUpdateBody"
      responses:
        200:
          description: Операция выполнена успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SelfActivityResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
    delete:
      summary: удаление карточки активности пользователя | DB
      security:
        - ApiKeyAuth: [ ]
      description: |-
        Удаляет карточку самостоятельной активности
      tags:
        - "Активности"
      parameters:
        - $ref: "#/components/parameters/ActivityID"
      responses:
        200:
          description: Операция выполнена успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /activities/self:
    post:
      summary: создание карточки активности пользователя | DB
      security:
        - ApiKeyAuth: [ ]
      description: |-
        Создает карточку активности пользователя
      tags:
        - "Активности"
      requestBody:
        $ref: "#/components/requestBodies/UserSelfActivityCreateBody"
      responses:
        201:
          description: Операция выполнена успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SelfActivityCreateResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /events:
    get:
      summary: список мероприятий | WCL
      operationId: getEvents
      description: Возвращает список мероприятий. tags рассчитываются для всех мероприятий без учета limit
      parameters:
        - name: startDate
          in: query
          description: дата начала (сегодняшний день текущего месяца и года)
          schema:
            type: string
            pattern: "[0-9]{4}-(0[0-9]|10|11|12)-([0-2][0-9]|30|31)T[0-9]{2}:[0-9]{2}:[0-9]{2}"
            example: "2022-06-01T00:00:00"
        - name: endDate
          in: query
          description: дата окончания (сегодняшний день текущего месяца и года + 30 дней)
          schema:
            type: string
            pattern: "[0-9]{4}-(0[0-9]|10|11|12)-([0-2][0-9]|30|31)T[0-9]{2}:[0-9]{2}:[0-9]{2}"
            example: "2022-06-01T00:00:00"
        - name: limit
          in: query
          description: лимит числа записей
          schema:
            type: integer
            example: 10
      security:
        - ApiKeyAuth: []
      tags:
        - "Мероприятия"
      responses:
        200:
          description: Список мероприятий
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventList"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /onboard:
    get:
      summary: Данных для онбординга | WCL
      operationId: getOnboard
      description: Возвращает услуги и подарки из всех абонементов
      parameters:
        - name: limit
          in: query
          description: лимит числа записей (отдельно подарки, отдельно услуги)
          schema:
            type: integer
            default: 10
      security:
          - ApiKeyAuth: []
      tags:
        - "Онбординг"
      responses:
        200:
          description: Список данных для онбординга
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Onboard"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /onboard/service:
    get:
      summary: детальная карточка услуги из онбординга | WCL
      operationId: getOnboardService
      description: Возвращает данные по услуге для онбординга
      parameters:
        - name:  entryList
          in: query
          description: список идентификаторов клубов для фильтрации
          required: true
          schema:
            type: array
            items:
              type: string
              format: uuid
          style: form
          explode: false
      security:
        - ApiKeyAuth: [ ]
      tags:
        - "Онбординг"
      responses:
        200:
          description: Данные по услуге для онбординга
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceInfo"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"

  /payment-methods:
    post:
      operationId: paymentMethods
      tags:
        - "Оплата"
      summary: Список способов оплаты | WCL
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/PaymentMethodBody"
      responses:
        200:
          description: Список способов оплаты
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentMethodsResponse"
        400:
          description: |
            Коды ошибок:

                * PaymentInProgressError - оплата в процессе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /payment-methods/account:
    post:
      operationId: paymentMethodsAccount
      tags:
        - "Оплата"
      summary: Список способов оплаты при пополнении личного счета | WCL
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/PaymentMethodsAccountBody"
      responses:
        200:
          description: Список способов оплаты
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentMethodsResponse"
        400:
          description: |
            Коды ошибок:

                * EmptyBaseGym - пополнение счета возможно после покупки клубной карты
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /payments:
    get:
      operationId: getPaymentStatus
      tags:
        - "Оплата"
      summary: Запрос на получение статуса платежа | WCL
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/UIDQuery"
      responses:
        200:
          description: Проверка статуса платежа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPaymentStatusResponse"
    post:
      operationId: createPayment
      tags:
        - "Оплата"
      summary: Запрос на создание платежа | WCL
      security:
        - ApiKeyAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreatePaymentBody"
      responses:
        200:
          description: Запрос на создание платежа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePaymentResponse"
  /payments/bind-card:
    post:
      operationId: bindCard
      tags:
        - "Оплата"
      summary: Запрос на привязку банковской карты клиента | WCL
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BindCard"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /payments/bind-card/status:
    get:
      operationId: getPaymentBindCardStatus
      tags:
        - "Оплата"
      summary: Запрос на получение статуса привязки карты | WCL
      security:
        - ApiKeyAuth: []
      parameters:
        - name: uid
          in: query
          description: идентификатор операции добавления карты
          required: true
          schema:
            type: string
            format: uuid
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
      responses:
        200:
          description: Проверка статуса привязки карты
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPaymentStatusResponse"
  /payments/unbind-card/{cardUid}:
    delete:
      operationId: unbindCard
      tags:
        - "Оплата"
      summary: Запрос на удаление банковской карты клиента | WCL
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/CardUid"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BindCard"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /payments/account:
    post:
      operationId: createAccountPayment
      tags:
        - "Оплата"
      summary: Запрос на создание оплаты с внутреннего счета | WCL
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/CreateAccountPaymentBody"
      responses:
        200:
          description: Запрос на создание платежа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePaymentAccountResponse"
        400:
          description: |
            Коды ошибок:

                * AccountPaymentFailed - после оплаты пришел статус fail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"

  /payments/history:
    get:
      operationId: getPaymentsHistory
      tags:
        - "Оплата"
      summary: История платежных операций | WCL
      description: |
        Список платежных операций за указанный промежуток времени. 
        Параметры uid и name либо отсутствуют либо применяются совместно
      security:
        - ApiKeyAuth: []
      parameters:
        - name: limit
          in: query
          description: количество запрошенных элементов
          schema:
            type: integer
            example: 20
            default: 20
        - name: uid
          in: query
          schema:
            type: string
            format: uuid
            description: идентификатор последнего документа
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
            example: af95922c-82ea-11ea-bc0a-005056b15dcf
        - name: name
          in: query
          schema:
            type: string
            description: наименование документа в структуре метаданных
            example: ОперацияПоПлатежнойКарте
      responses:
        200:
          description: Список платежных операций
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPaymentHistoryResponse"

  /direction-kinds:
    get:
      operationId: directionKindList
      tags:
        - "Направления бизнеса/фитнеса"
      summary: Список направлений бизнеса (фитнеса) | DB
      description: |
        Список направлений бизнеса, который можно отфильтровать по id тренера. 
        Например:
          * Тренажерный зал
          * Водные процедуры
          * Детские программы
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/ChainCode"
        - $ref: "#/components/parameters/GymUid"
        - $ref: "#/components/parameters/TrainerId"
        - $ref: "#/components/parameters/DirectionOptional"
        - $ref: "#/components/parameters/ServiceSetType"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectionKindList"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /services:
    get:
      operationId: serviceList
      tags:
        - "Услуги"
      summary: Получение списка услуг | WCL
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/GymUidRequired"
        - $ref: "#/components/parameters/Direction"
        - $ref: "#/components/parameters/ServiceTypes"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceList"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /services/{serviceUid}:
    get:
      operationId: getService
      tags:
        - "Услуги"
      summary: Получение карточки услуги | WCL
      description: Поле клуб (с признаком liked услуги) заполняется только для переданного фильтра gymUid
      security:
        - ApiKeyAuth: []
      parameters:
        - name: serviceUid
          in: path
          description: идентификатор услуги
          required: true
          schema:
            type: string
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
        - name: gymUid
          in: query
          description: идентификатор клуба
          required: false
          schema:
            type: string
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceInfo"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /services/{serviceUid}/liked:
    post:
      operationId: PostServicesServiceUIDLiked
      tags:
        - "Услуги"
        - "Избранное"
      summary: Пометить услугу понравившимся | DB
      description: |
        Связываем авторизованного пользователя и переданного ID услуги
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/GymUidRequired"
        - name: serviceUid
          in: path
          description: идентификатор услуги
          required: true
          schema:
            type: string
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
      responses:
        200:
          description: Результат простановки признака liked у услуги
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /services/{serviceUid}/unliked:
    post:
      operationId: PostServicesServiceUIDUnliked
      tags:
        - "Услуги"
        - "Избранное"
      summary: Снять пометку понравившегося услуги | DB
      description: |
        Удаляем связку авторизованного пользователя и переданного ID услуги
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/GymUidRequired"
        - name: serviceUid
          in: path
          description: идентификатор услуги
          required: true
          schema:
            type: string
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
      responses:
        200:
          description: Результат удаления признака liked у услуги
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /services/liked:
    get:
      tags:
        - "Услуги"
        - "Избранное"
      summary: Список понравившихся услуг | DB + WCL
      description: Список ранее выбранных понравившихся услуг отсортированных по дате добавления в избранное
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/Direction"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceList"

  /services/debt:
    get:
      operationId: getDebtService
      tags:
        - "Услуги"
      summary: Получение количества не оплаченных услуг | WCL
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDebtService"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /services/payments:
    get:
      operationId: getPaymentServices
      tags:
        - "Услуги"
      summary: Получение списка услуг к оплате | WCL
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentServiceList"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /favorite_gyms/services:
    get:
      operationId: getServicesFromFavoriteGym
      tags:
        - "Услуги"
      summary: Получение списка услуг из избранных клубов | WCL
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicesFromFavoriteGyms"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /packages:
    get:
      operationId: packageList
      tags:
        - "Пакеты услуг"
      summary: Запрос списка пакетов клиента | WCL
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageList"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /packages/service-sets:
    get:
      tags:
        - "Пакеты услуг"
      summary: Получение списка наборов услуг
      description: |
        Список наборов услуг - клип-карты и пакеты услуг
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/GymUid"
        - $ref: "#/components/parameters/DirectionKindName"
        - $ref: "#/components/parameters/ServiceSetType"
        - $ref: "#/components/parameters/TrainerId"
        - $ref: "#/components/parameters/DirectionOptional"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceSetList"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /packages/constructor:
    post:
      operationId: constructorData
      tags:
        - "Пакеты услуг"
      summary: Получение данных для конструктора | WCL
      requestBody:
        $ref: "#/components/requestBodies/PackageConstructorBody"
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageConstructorData"
        400:
          $ref: "#/components/responses/ConstructorError"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /packages/activate:
    post:
      operationId: activatePackage
      tags:
        - "Пакеты услуг"
      summary: Запрос на активацию пакета | WCL
      requestBody:
        $ref: "#/components/requestBodies/PackageActivationBody"
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageActivation"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /packages/order:
    post:
      operationId: orderPackage
      tags:
        - "Пакеты услуг"
      summary: Запрос на оформление пакета | WCL
      requestBody:
        $ref: "#/components/requestBodies/PackageOrderBody"
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageOrderList"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /packages/{uid}/history:
    get:
      operationId: packageHistories
      tags:
        - "Пакеты услуг"
      summary: История пакетов клиента | WCL
      description:
        Метод возвращает список операций по контракту (Продажа, Активация, Заморозка, Передача, Отказ от содоступа,
        Заявка на возврат контракта, Заявка на возврат денежных средств, Отказ от доп пакета, Изменение клубов доступа)
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: идентификатор контракта
            pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
            maxLength: 36
            example: af95922c-82ea-11ea-bc0a-005056b15dcf
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageHistories"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"


  /stories/categories:
    get:
      tags:
        - "Сториc"
      summary: Получить категории и публикации
      description: Получить все категории вместе с их публикациями
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/ChainCodeQueryRequired"
      responses:
        200:
          $ref: "#/components/responses/StoryCategoryList"
        400:
          $ref: "#/components/responses/BadRequestError"

  /stories/categories/{categoryID}/view:
    post:
      summary: Пометить категорию просмотренной
      description: Пометить указанную категорию просмотренной
      tags:
        - "Сториc"
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/CategoryIDPathRequired"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /stories/publications/{publicationID}/like:
    post:
      summary: Пометить публикацию, как понравившуюся
      description: Пометить указанную публикацию, как понравившуюся
      tags:
        - "Сториc"
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: categoryID
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - $ref: "#/components/parameters/PublicationIDPathRequired"
      responses:
        200:
          description: Публикация помечена, как понравившаяся
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /stories/publications/{publicationID}/unlike:
    post:
      summary: Удалить публикацию из понравившихся
      description: Удалить публикацию из списка понравившихся публикаций
      tags:
        - "Сториc"
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: categoryID
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - $ref: "#/components/parameters/PublicationIDPathRequired"
      responses:
        200:
          description: Публикация убрана из понравившихся
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"


  /feedbacks:
    get:
      operationId: getFeedbacks
      tags:
        - "Отзывы"
      summary: Запрос на получение данных для опроса пользователей | DB
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FeedbackResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        400:
          $ref: "#/components/responses/ValidationError"
    post:
      operationId: postFeedback
      tags:
        - "Отзывы"
      summary: Запрос на оставление обратной связи | DB
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/FeedbackRateBody"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        400:
          $ref: "#/components/responses/ValidationError"

  /notifications/push:
    post:
      operationId: sendPush
      tags:
        - "Интерфейс уведомлений для WCL"
      summary: Отправка push-уведомления | DB
      security:
        - XApiKeyAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SendPushBody"
      responses:
        201:
          description: Запрос на создание push-уведомления успешно создан
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        500:
          $ref: "#/components/responses/InternalServerError"

  /notifications/feedback:
    post:
      operationId: createFeedback
      tags:
        - "Интерфейс уведомлений для WCL"
      summary: Сохранение данных обратной связи и отправка уведомления в МП | DB
      security:
        - XApiKeyAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/FeedbackDataBody"
      responses:
        201:
          description: Данные сохранены
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        500:
          $ref: "#/components/responses/InternalServerError"

  /notifications/unread/count:
    get:
      operationId: getUnreadNotificationsCount
      tags:
        - "Центр уведомлений"
      summary: Запрос на получение количества непрочитанных сообщений | WCL
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnreadNotificationsCount"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"

  /notifications:
    get:
      operationId: getInfoNotifications
      tags:
        - "Центр уведомлений"
      summary: Список информационных уведомлений | WCL
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationInfo"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"

  /notifications/read:
    post:
      operationId: readNotifications
      tags:
        - "Центр уведомлений"
      summary: Чтение уведомлений | WCL
      security:
        - ApiKeyAuth: []
      requestBody:
        $ref: "#/components/requestBodies/ReadNotificationsBody"
      responses:
        201:
          description: Данные сохранены
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        500:
          $ref: "#/components/responses/InternalServerError"

  /system/status:
    get:
      tags:
        - "Системные методы"
        - "Технические работы"
      summary: Получить статус системы
      description: Проверка статуса системы для отображения экрана с техническими работами
      operationId: getSystemStatus
      responses:
        200:
          description: Данные со статусом системы
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemStatus"
    post:
      tags:
        - "Системные методы"
        - "Технические работы"
      summary: Установить статус системы
      description: Установка статуса системы для отображения экрана с техническими работами
      operationId: postSystemStatus
      security:
        - XApiKeyAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/SystemStatusBody"
      responses:
        200:
          description: Данные со статусом системы
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
  /system/cache:
    delete:
      tags:
        - "Системные методы"
      summary: Cброс кеша по ключу
      description: Удаление данных из кеша по конкретному ключу
      operationId: deleteCacheByKey
      security:
        - XApiKeyAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/SystemDeleteCacheBody"
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"

  /system/sync:
    post:
      tags:
        - "Системные методы"
      summary: синхронизация БД с 1С | WCL
      description: |
        Принудительная синхронизация данных в БД из 1С, в замен cron задачи.
      security:
        - XApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        400:
          $ref: "#/components/responses/ValidationError"
  /system/sync/trainers:
    post:
      tags:
        - "Системные методы"
      summary: синхронизация тренеров в БД | WCL
      description: |
        Принудительная синхронизация тренеров и их связей с залами и видами направления бизнеса
      security:
        - XApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        400:
          $ref: "#/components/responses/ValidationError"
  /system/sync/direction-kinds:
    post:
      tags:
        - "Системные методы"
      summary: синхронизация видов направления бизнеса в БД | DB
      description: |
        Принудительная синхронизация видов направления бизнеса и их связей с залами и видами направления бизнеса
      security:
        - XApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        400:
          $ref: "#/components/responses/ValidationError"
  /system/sync/services:
    post:
      tags:
        - "Системные методы"
      summary: синхронизация видов направления бизнеса в БД | DB
      description: |
        Принудительная синхронизация видов направления бизнеса и их связей с залами и видами направления бизнеса
      security:
        - XApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        400:
          $ref: "#/components/responses/ValidationError"
  /system/sync/gyms:
    post:
      tags:
        - "Системные методы"
      summary: синхронизация спортзалов в БД | DB
      description: |
        Принудительная синхронизация спортзалов Gyms, наборов услуг ServiceSets и тренеров Trainers
      security:
        - XApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        400:
          $ref: "#/components/responses/ValidationError"

  /system/migration:
    post:
      tags:
        - "Системные методы"
      summary: "Выполнить миграции"
      security:
        - XApiKeyAuth: [ ]
      responses:
        200:
          description: Выполнение запроса завершилось успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"

  /system/adv/users:
    put:
      summary: Задать пользователей для показа рекламных баннеров
      operationId: setUsersForAdvBanner
      security:
        - XApiKeyAuth: [ ]
      tags:
        - "Главная"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdTargetList"
      responses:
        200:
          description: Операция прошла успешна
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusOk"
        401:
          $ref: "#/components/responses/AuthenticationRequiredError"
        403:
          $ref: "#/components/responses/ForbiddenError"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Access-Token
    XApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  # Reusable request bodies
  requestBodies:
    CreateSession:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              phone:
                type: string
                description: номер телефона
                example: "+79780000002"
              chainCode:
                type: integer
                default: 1
                description: код сети
              deviceToken:
                type: string
                description: токен устройства
                format: uuid
              deviceInfo:
                $ref: "#/components/schemas/DeviceInfo"
            required:
              - phone
              - chainCode
              - deviceToken
              - deviceInfo
    ConfirmSession:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              password:
                type: string
                description: код подтверждения из смс
                example: "3223"
              deviceToken:
                type: string
                description: токен устройства
                format: uuid
            required:
              - password
              - deviceToken
    RefreshSession:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              refreshToken:
                type: string
                format: uuid
                description: Токен обновления авторизации
            required:
              - refreshToken
    ChangeSession:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              linkedAccountUid:
                type: string
                description: ID связанного аккаунта
                format: uuid
            required:
              - linkedAccountUid
    UpdateProfile:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
                description: Имя
                example: "Elon"
              secondName:
                type: string
                description: Отчество
              lastName:
                type: string
                description: Фамилия
                example: "Musk"
              email:
                type: string
                description: Адрес электронной почты
                example: "elon@redmadrobot.com"
              birthdate:
                type: string
                format: date-time
                x-go-type: openapi.CustomTime
                description: Дата рождения
                example: "1951-11-12T00:00:00"
            required:
              - firstName
              - secondName
              - lastName
              - email
              - birthdate
    PersonalBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              trainerId:
                description: Идентификатор тренера
                type: string
                example: e06dbc31-d3c6-11e4-80d3-005056810138
              serviceList:
                type: array
                items:
                  type: string
              date:
                description: Дата записи
                type: string
            required:
              - serviceList
              - date
    PrebookingBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              gymId:
                description: Идентификатор тренера
                type: string
                example: e06dbc31-d3c6-11e4-80d3-005056810138
              trainerId:
                description: Идентификатор тренера
                type: string
                example: e06dbc31-d3c6-11e4-80d3-005056810138
              serviceId:
                description: Идентификатор услуги
                type: string
                example: e06dbc31-d3c6-11e4-80d3-005056810138
              serviceEntryId:
                description: Идентификатор подуслуги
                type: string
                example: e06dbc31-d3c6-11e4-80d3-005056810138
              date:
                description: Дата записи
                type: string
                example: "2022-06-10T00:00:00"
                format: date-time
                x-go-type: openapi.CustomTime
                maxLength: 20
            required:
              - gymId
              - trainerId
              - serviceId
              - serviceEntryId
              - date
    UserSelfActivityUpdateBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SelfActivityCreate"
    UserSelfActivityCreateBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SelfActivityCreate"
    PackageActivationBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              uid:
                description: идентификатор абонемента
                type: string
                maxLength: 36
              activationDate:
                description: Дата начала контракта
                type: string
                format: date
            required:
              - uid
              - activationDate
    PackageOrderBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              uid:
                description: идентификатор номенклатуры пакета
                type: string
                maxLength: 36
              gymUid:
                description: идентификатор клуба
                type: string
            required:
              - uid
              - gymUid
    PackageConstructorBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              uid:
                type: string
                description: идентификатор описания пакета услуг
                maxLength: 36
              gymUid:
                type: string
              packageList:
                type: array
                items:
                  $ref: "#/components/schemas/PackageListForConstructorBody"
            required:
              - packageList
              - gymUid
              - uid
    PaymentMethodBody:
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              services:
                type: array
                items:
                  type: object
                  properties:
                    docId:
                      type: string
                      format: uuid
                    type:
                      $ref: "#/components/schemas/DocTypeQuery"
                  required:
                    - docId
                    - type
            required:
              - services

    PaymentMethodsAccountBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              amount:
                type: integer
                description: сумма для зачисления
              chainCode:
                type: integer
                description: чейн-код пользователя
            required:
              - chainCode
              - amount

    CreatePaymentBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              uid:
                description: Идентификатор заказа
                type: string
              owner:
                description: Идентификатор владельца
                type: string
              card:
                description: Идентификатор карты
                type: string
            required:
              - uid
              - owner
              - card
    CreateAccountPaymentBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              uid:
                description: Идентификатор заказа
                type: string
                maxLength: 36
              owner:
                description: Идентификатор владельца
                type: string
              deposits:
                description: Массив по оплате со внутр счета
                type: array
                items:
                  type: number
                  format: double
            required:
              - uid
              - owner
              - deposits
    SaveNotificationDataBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              userId:
                description: Идентификатор пользователя
                type: string
                format: uuid
                example: 4f1225f6-cb40-11e9-bba8-005056b11c47
                nullable: false
                minLength: 1
              ednaAppId:
                description: Идентификатор ednaAppId
                type: string
                nullable: false
                minLength: 1
              deviceUid:
                description: Уникальный идентификатор устройства
                type: string
                format: uuid
                example: 2d181c7d7289b049a2a735b1e1f6e94c72354ea686ab9f09d280e6619046e70a
                nullable: false
                minLength: 1
            required:
              - userId
              - ednaAppId
              - deviceUid
    SetObjectives:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              objectives:
                type: array
                items:
                  $ref: "#/components/schemas/SetObjective"
            required:
              - objectives
    FeedbackDataBody:
      required: true
      content:
        application/json:
          schema:
            required:
              - feedbackTasks
            type: object
            properties:
              feedbackTasks:
                type: array
                items:
                  $ref: "#/components/schemas/FeedbackDataItem"

    ReadNotificationsBody:
      required: true
      content:
        application/json:
          schema:
            required:
              - notificationsIds
            type: object
            properties:
              notificationsIds:
                type: array
                items:
                  type: string
                  description: идентификатор уведомления

    SendPushBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              userId:
                description: Идентификатор пользователя
                type: string
                example: cc4b5a38-cb19-4925-849a-ad22f8d0317e
              title:
                description: Заголовок уведомления
                type: string
                example: Весенняя акция
              text:
                description: Текст уведомления
                type: string
                example: Акция для всех владельцев абонементов
              phone:
                description: Номер телефона пользователя
                type: string
                example: "73232323223"
              type:
                $ref: "#/components/schemas/PushType"
            required:
              - title
              - text
              - userId
    FeedbackRateBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              feedbacks:
                description: массив отзывов клиента
                type: array
                items:
                  $ref: "#/components/schemas/FeedbackRate"

    FavoriteGyms:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - gyms
              - chainCode
            properties:
              chainCode:
                description: идентификатор сети
                type: integer
                minimum: 1
                example: 1
              gyms:
                description: список UUID выбранных клубов
                type: array
                minimum: 1
                maximum: 10
                items:
                  $ref: "#/components/schemas/UUID"

    SchedulesFilters:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: Набор персональных фильтров расписаний
            properties:
              partDayFilters:
                description: Время начала занятия
                type: array
                items:
                  $ref: "#/components/schemas/PartDay"
              ageFilters:
                type: object
                description: Возраст для тренировки
                properties:
                  ageMin:
                    type: integer
                    description: Значение возраста в месяцах
                    minimum: 0
                  ageMax:
                    type: integer
                    description: Значение возраста в месяцах
                    minimum: 0
              paymentTypeFilters:
                $ref: "#/components/schemas/PaymentTypeFilters"

    UpdateProfileSettings:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: Набор параметров настроек пользователя
            properties:
              smsNotificationEnable:
                type: boolean
                description: уведомление по СМС
              emailNotificationEnable:
                type: boolean
                description: уведомление по e-mail

    SystemStatusBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: Новый статус системы
            required:
              - status
              - message
            properties:
              status:
                type: string
                description: новый статус системы
              message:
                type: string
                description: сообщение для пользователей

    SystemDeleteCacheBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - key
            properties:
              key:
                type: string
                description: ключ кеша для сброса


  # Reusable path, query, header and cookie parameters
  parameters:
    ChainCode:
      name: chainCode
      in: query
      description: идентификатор сети
      schema:
        type: integer
        default: 1
    ChainCodeQueryRequired:
      name: chainCode
      in: query
      description: идентификатор сети
      required: true
      schema:
        type: integer
        default: 1
    ActivityID:
      name: activityID
      in: path
      description: идентификатор активности
      required: true
      example: cc35e9b9-d155-11e4-80d1-005056810138
      schema:
        type: string
        format: uuid
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    CardUid:
      name: cardUid
      in: path
      required: true
      description: Идентификатор карты пользователя
      schema:
        type: string
        format: uuid
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
      example: 4f1225f6-cb40-11e9-bba8-005056b11c47
    Gym-Uid:
      name: gymUid
      in: path
      description: идентификатор клуба
      required: true
      example: cc35e9b9-d155-11e4-80d1-005056810138
      schema:
        type: string
        format: uuid
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    GymUid:
      name: gymUid
      in: query
      description: идентификатор клуба
      required: false
      example: cc35e9b9-d155-11e4-80d1-005056810138
      schema:
        type: string
        format: uuid
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    GymUidRequired:
      name: gymUid
      in: query
      description: идентификатор клуба
      required: true
      example: c4f88ced-e55a-11eb-bc67-005056b122e0
      schema:
        type: string
        format: uuid
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    GymUids:
      name: gymUids
      in: query
      description: список идентификаторов клубов для фильтрации
      required: false
      schema:
        type: array
        items:
          type: string
          format: uuid
      style: form
      explode: false
      examples:
        oneType:
          summary: Пример для одного значения
          value: [c4f88ced-e55a-11eb-bc67-005056b122e0] # ?type=gym
        multipleTypes:
          summary: Пример для нескольких значений
          value: [
              c4f88ced-e55a-11eb-bc67-005056b122e0,
              d4f88ced-e55a-11eb-bc67-005056b122e1,
            ] # ?types=gym,outdoor
    TrainerIds:
      name: trainerUids
      in: query
      description: список идентификаторов тренеров для фильтрации
      required: false
      schema:
        type: array
        maximum: 10
        items:
          type: string
          format: uuid
      style: form
      explode: false
      examples:
        oneType:
          summary: Пример для одного значения
          value: [ c4f88ced-e55a-11eb-bc67-005056b122e0 ]
        multipleTypes:
          summary: Пример для нескольких значений
          value: [
            c4f88ced-e55a-11eb-bc67-005056b122e0,
            d4f88ced-e55a-11eb-bc67-005056b122e1,
          ]
    ServiceIds:
      name: serviceUids
      in: query
      description: список идентификаторов услуг для фильтрации
      required: false
      schema:
        type: array
        maximum: 10
        items:
          type: string
          format: uuid
      style: form
      explode: false
      examples:
        oneType:
          summary: Пример для одного значения
          value: [ c4f88ced-e55a-11eb-bc67-005056b122e0 ]
        multipleTypes:
          summary: Пример для нескольких значений
          value: [
            c4f88ced-e55a-11eb-bc67-005056b122e0,
            d4f88ced-e55a-11eb-bc67-005056b122e1,
          ]
    DirectionKindName:
      name: directionKindName
      in: query
      description: наименование вида направления бизнеса/фитнеса
      schema:
        type: string
        example: Тренировки
    ServiceSetType:
      name: serviceSetType
      in: query
      description: тип набора услуг
      schema:
        $ref: "#/components/schemas/ServiceSetType"
    ServiceSetTag:
      name: serviceSetTag
      in: query
      description: тег набора услуги
      schema:
        type: string
        example: Тренировки
    ServiceTypes:
      name: types
      in: query
      required: true
      description: тип услуги, можно передавать как массив services=personal,group
      schema:
        type: array
        items:
          $ref: "#/components/schemas/ServiceType"
      style: form
      explode: false
    Direction:
      name: direction
      in: query
      required: true
      description: направление
      schema:
        $ref: "#/components/schemas/Direction"
    DirectionOptional:
      name: direction
      in: query
      description: направление
      schema:
        $ref: "#/components/schemas/Direction"
    DocId:
      name: docId
      in: path
      description: идентификатор документа
      required: true
      schema:
        type: string
        format: uuid
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    GymIdRequired:
      name: gymId
      in: query
      description: идентификатор документа
      required: true
      schema:
        type: string
        format: uuid
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    TrainerId:
      name: trainerId
      in: query
      description: идентификатор тренера
      required: false
      example: f866a4a9-d3c6-11e4-80d3-005056810138
      schema:
        type: string
        format: uuid
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    TrainerIdRequired:
      name: trainerId
      in: query
      description: идентификатор тренера
      required: true
      example: f866a4a9-d3c6-11e4-80d3-005056810138
      schema:
        type: string
        format: uuid
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    ServiceId:
      name: serviceId
      in: query
      description: идентификатор услуги (продукта в 1с)
      required: false
      schema:
        type: string
        format: uuid
        example: f866a4a9-d3c6-11e4-80d3-005056810138
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    ServiceIdRequired:
      name: serviceId
      in: query
      description: идентификатор услуги (продукта в 1с)
      required: true
      schema:
        type: string
        format: uuid
        example: f866a4a9-d3c6-11e4-80d3-005056810138
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    ServiceEntryId:
      name: serviceEntryId
      in: query
      description: идентификатор подуслуги (вариант услуги с длительностью и проч)
      required: false
      schema:
        type: string
        format: uuid
        example: f866a4a9-d3c6-11e4-80d3-005056810138
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    ServiceUid:
      name: serviceUid
      in: query
      description: идентификатор услуги
      required: false
      example: 1754105c-2245-11e5-80da-005056811447
      schema:
        type: string
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    ServiceUids:
      name: serviceUids
      in: query
      description: идентификатор услуг
      required: false
      example: 1754105c-2245-11e5-80da-005056811447
      schema:
        type: array
        items:
          type: string
    TrainerUid:
      name: trainerUid
      in: query
      description: идентификатор тренера
      required: false
      example: 1754105c-2245-11e5-80da-005056811447
      schema:
        type: string
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    UIDQuery:
      name: uid
      in: query
      description: идентификатор запроса
      required: true
      schema:
        type: string
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36
    CategoryIDPathRequired:
      name: categoryID
      in: path
      description: ID категории
      required: true
      example: 1337
      schema:
        type: integer
    PublicationIDPathRequired:
      name: publicationID
      in: path
      description: ID публикации
      required: true
      example: 1337
      schema:
        type: integer
    UserIdQueryRequired:
      name: userId
      in: query
      required: true
      example: 1754105c-2245-11e5-80da-005056811447
      schema:
        type: string
        format: uuid
    ServiceEntryIdRequired:
      name: serviceEntryId
      in: query
      description: идентификатор подуслуги (вариант услуги с длительностью и проч)
      required: true
      schema:
        type: string
        format: uuid
        example: f866a4a9-d3c6-11e4-80d3-005056810138
        pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        maxLength: 36

  # Reusable response headers
  headers: {}

  # Reusable responses, such as 401 Unauthorized or 400 Bad Request
  responses:
    # Generic errors
    AuthenticationRequiredError:
      description: Требуется аутентификация
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
          example:
            error:
              code: AuthenticationRequired
              description: "Требуется аутентификация"
    ScheduleReserveError:
      description: ошибка резервирования персональной тренировки
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
          examples:
            Неправильный возраст:
              value:
                error:
                  code: InvalidAge
                  description: неверный возраст
            Ошибка доступа в зал:
              value:
                error:
                  code: GymNotAllowed
                  description: "в данный зал нельзя записаться на это время"
    ValidationError:
      description: Ошибка валидации данных запроса
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
          example:
            error:
              code: ValidationError
              description: "Ошибка валидации данных запроса"
              error: "request body has an error: ..."
    BadRequestError:
      description: Неверные данные для выполнения запроса
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
          example:
            error:
              code: ValidationError
              description: "Неверные данные для выполнения запроса"
    ForbiddenError:
      description: Доступ запрещен
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
          example:
            error:
              code: Forbidden
              description: "Доступ запрещен"
    VersionUpdateRequired:
      description: Требуется обновление приложения
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
          example:
            error:
              code: VersionUpdateRequired
              description: "Требуется обновление приложения"
    NotFoundError:
      description: Объект не найден
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
          example:
            error:
              code: NotFound
              description: "Объект не найден"

    # Specific request errors
    AuthClientError:
      description: Ошибка выполнения запроса авторизации
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIErrorWithRetryTime"
          examples:
            Ошибка валидации:
              value:
                error:
                  code: ValidationError
                  description: "Ошибка валидации данных запроса"
                  error: "request body has an error: ..."
            Лимит отправки СМС:
              value:
                error:
                  code: TooManyRequests
                  description: "Следующий запрос СМС с кодом можно сделать через %d секунд"
                  error: ""
                  retryTime: 60

    AuthConfirmError:
      description: Ошибка подтверждения запроса авторизации
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
          examples:
            Ошибка валидации:
              value:
                error:
                  code: ValidationError
                  description: "Ошибка валидации данных запроса"
                  error: "request body has an error: ..."
            Неправильный код:
              value:
                error:
                  code: AuthWrongCodeError
                  description: "Неправильный код."
                  err: "confirm phone wrong code error"
            Истекло время действия кода:
              value:
                error:
                  code: AuthExpiredCodeError
                  description: "Время действия кода истекло."
                  err: "confirm phone expired code error"
            Код не был отправлен:
              value:
                error:
                  code: AuthCodeWasNotSentError
                  description: "Необходимо получить код."
                  err: "confirm phone code was not sent"

    ConstructorError:
      description: Если в конструкторе пришли пустые данные по параметрам [количество услуг] или [длительность] отображается ошибка
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
          example:
            error:
              code: ConstructorError
              description: "Нет данных о списке услуг в наборе"

    InternalServerError:
      description: Внутренняя ошибка
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
          example:
            error:
              code: InternalServerError
              description: "Внутренняя ошибка"

    StoryCategoryList:
      description: Выполнение запроса завершилось успешно
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/StoryCategory"

    Success:
      description: Действие выполнено успешно

  # Reusable schemas (data models)
  schemas:
    APIError:
      type: object
      additionalProperties: false
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "Code"
            description:
              type: string
              example: "Error description"
            err:
              type: string
              example: "Error"
          required:
            - code
            - description
      required:
        - error

    APIErrorWithRetryTime:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "Code"
            description:
              type: string
              example: "Error description"
            err:
              type: string
              example: "Error"
            retryTime:
              type: integer
              description: количество секунд до следующей отправки
              example: 60
          required:
            - code
            - description
      required:
        - error

    Department:
      type: object
      properties:
        name:
          description: наименование
          type: string
        phone:
          description: телефон
          type: string
        weekdaysTime:
          description: время работы в будни
          type: string
        holidaysTime:
          description: время  работы в выходные и праздники
          type: string
      required:
        - name
        - phone
        - weekdaysTime
        - holidaysTime
    Departments:
      type: array
      items:
        $ref: "#/components/schemas/Department"

    TypeDescription:
      properties:
        description:
          description: доп. описание
          type: string
        name:
          description: наименование
          type: string
      required:
        - name
        - description
      type: object

    TypeDescriptionList:
      type: array
      description: Описание типа направления
      items:
        $ref: "#/components/schemas/TypeDescription"

    TypeName:
      description: Имя типа направления
      type: string

    Additional:
      type: object
      description: дополнительное описание
      properties:
        typeDescription:
          $ref: "#/components/schemas/TypeDescriptionList"
        typeName:
          $ref: "#/components/schemas/TypeName"
      required:
        - typeDescription
        - typeName

    AdditionalList:
      type: array
      description: дополнительное описание
      items:
        $ref: "#/components/schemas/Additional"

    GymInfo:
      type: object
      properties:
        additional:
          $ref: "#/components/schemas/AdditionalList"
        departments:
          $ref: "#/components/schemas/Departments"
        uid:
          type: string
          description: идентификатор клуба
          minLength: 36
          maxLength: 36
          format: uuid
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
        name:
          type: string
          description: наименование клуба
          example: "Sport Day"
        type:
          type: string
          enum:
            - gym
            - online
            - studio
            - outdoor
          description: тип клуба
          example: "Everyday"
        address:
          type: string
          description: адрес клуба
          example: "Русаковская 31"
        segment:
          $ref: "#/components/schemas/Segment"
        coords:
          $ref: "#/components/schemas/Coords"
        metro:
          $ref: "#/components/schemas/MetroList"
        hasAccess:
          type: boolean
          description: "есть доступ, для не авторизованного клиента null"
        base:
          type: boolean
          description: "основной клуб доступа"
        order:
          type: integer
          description: "порядок вывода клуба"
          example: 1
        photos:
          $ref: "#/components/schemas/PhotoList"
        state:
          type: string
          description: 'состояние: "Предпродажи", "Ремонт" и т.д.'
          example: Предпродажи
        weekdaysTime:
          description: время работы в будни
          type: string
        holidaysTime:
          description: время  работы в выходные и праздники
          type: string
        isNew:
          type: boolean
          description: Является ли клуб новым (state = 'клуб на предпродаже')
        isRenovation:
          type: boolean
          description: Находится ли клуб на ремонте (state = 'клуб на ремонте')
        liked:
          type: boolean
          description: признак избранного клуба
      required:
        - departments
        - uid
        - name
        - type
        - address
        - segment
        - coords
        - hasAccess
        - base
        - order
        - state
        - weekdaysTime
        - holidaysTime
        - isNew
        - isRenovation
        - liked

    Gym:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор клуба
          minLength: 36
          maxLength: 36
          format: uuid
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
        name:
          type: string
          description: наименование клуба
          example: "Sport Day"
        type:
          type: string
          enum:
            - gym
            - online
            - studio
            - outdoor
          description: тип клуба
          example: "gym"
        address:
          type: string
          description: адрес клуба
          example: "Русаковская 31"
        segment:
          $ref: "#/components/schemas/Segment"
        coords:
          $ref: "#/components/schemas/Coords"
        metro:
          $ref: "#/components/schemas/MetroList"
        phone:
          type: string
          description: основной телефон клуба
          example: "89996664433"
        hasAccess:
          type: boolean
          description: "есть доступ, для не авторизованного клиента null"
        favorite:
          type: boolean
          description: "выбран, как избранный клуб"
        base:
          type: boolean
          description: "основной клу  б доступа"
        order:
          type: integer
          description: "порядок вывода клуба"
          example: 1
        photo:
          type: string
          description: основное фото клуба
          example: https://foto.com
        state:
          type: string
          description: 'состояние: "Предпродажи", "Ремонт" и т.д.'
          example: Предпродажи
        weekdaysTime:
          description: время работы в будни
          type: string
        holidaysTime:
          description: время  работы в выходные и праздники
          type: string
        isNew:
          type: boolean
          description: Является ли клуб новым (state = 'клуб на предпродаже')
        isRenovation:
          type: boolean
          description: Находится ли клуб на ремонте (state = 'клуб на ремонте')
        departments:
          $ref: "#/components/schemas/Departments"
        liked:
          type: boolean
          description: признак избранного клуба
      required:
        - uid
        - name
        - type
        - address
        - segment
        - coords
        - metro
        - phone
        - photo
        - weekdaysTime
        - holidaysTime
        - favorite
        - isNew
        - isRenovation
        - departments
        - liked

    GymList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Gym"

    Club:
      allOf:
        - $ref: "#/components/schemas/Gym"
        - required:
            - groupType
            - liked
          properties:
            groupType:
              type: string
              description: >
                Типы:
                  * `MY_CLUB`
                  * `ONLINE`
                  * `STUDIO`
                  * `OUTDOOR`
                  * `LUXURY`
                  * `CLASSIC`
                  * `LIGHT`
              enum:
                - MY_CLUB
                - ONLINE
                - STUDIO
                - OUTDOOR
                - LUXURY
                - CLASSIC
                - LIGHT
            liked:
              type: boolean
              description: признак избранного клуба

    ClubList:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Club"

    ServiceItemObjective:
      type: object
      required:
        - uid
        - name
        - color
      properties:
        uid:
          type: string
          description: идентификатор услуги
          minLength: 36
          maxLength: 36
          format: uuid
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
        name:
          type: string
          description: наименование цели
        color:
          type: string
          description: цвет

    ServiceItem:
      description: Услуга
      type: object
      required:
        - uid
        - name
        - shortDescription
        - photo
        - tags
        - objectiveList
        - bookingAvailable
      properties:
        uid:
          type: string
          description: идентификатор услуги
          minLength: 36
          maxLength: 36
          format: uuid
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
        name:
          type: string
          description: имя услуги
        shortDescription:
          type: string
          description: краткое описание услуги
        photo:
          type: string
          description: фото
        tags:
          type: array
          items:
            type: string
        bookingAvailable:
          type: boolean
          description: Доступны ли слоты для записи на эту услугу
          example: true
        objectiveList:
          type: array
          items:
            $ref: "#/components/schemas/ServiceItemObjective"
        gym:
          $ref: "#/components/schemas/ServiceGym"

    ServiceGym:
      type: object
      description: Информация по залу в рамках конкретной услуги
      required:
        - uid
        - name
        - liked
      properties:
        uid:
          type: string
          description: идентификатор клуба
          minLength: 36
          maxLength: 36
          format: uuid
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
        name:
          type: string
          description: наименование клуба
        liked:
          type: boolean
          description: признак избранной услуги в рамках этого зала

    DirectionKindList:
      description: список направлений бизнеса/фитнеса
      type: object
      required:
        - directionKinds
      properties:
        directionKinds:
          type: array
          items:
            $ref: "#/components/schemas/DirectionKind"

    DirectionKind:
      description: Направление бизнеса/фитнеса
      type: object
      required:
        - name
        - directions
      properties:
        name:
          type: string
          description: наименование
          example: Онлайн
        directions:
          type: array
          items:
            $ref: "#/components/schemas/Direction"
        photo:
          type: string
          description: url фотографии

    ServiceList:
      description: Список услуг
      type: object
      required:
        - services
        - objectives
        - tags
      properties:
        services:
          type: array
          items:
            $ref: "#/components/schemas/ServiceItem"
        objectives:
          $ref: "#/components/schemas/UserObjectives"
        tags:
          type: array
          description: |
            список тегов. сортировка выполняется по количеству вхождений. для тегов с одинаковым
            количеством вхождений сортировка выполняется по алфавиту.
          items:
            type: string

    PackageListForConstructorBody:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор пакета услуг
        price:
          type: number
          format: double
          description: цена пакета услуг
      required:
        - uid
        - price

    PackageForPurchaseService:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор пакета услуг
        price:
          type: number
          format: double
          description: цена пакета услуг
        entries:
          type: array
          items:
            $ref: "#/components/schemas/ServiceSetEntry"
      required:
        - uid
        - price
        - entries

    ServiceSetEntry:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор
        name:
          type: string
          description: наименование
          example: Солярий
        employeeKind:
          type: string
          description: категория сотрудника
          example: Сотрудник СПА
        serviceTypeBusinessDirection:
          type: string
          description: категория направления бизнес
          example: СПА
        directionKind:
          type: string
          description: вид направления бизнеса
        tags:
          type: array
          description: список тегов
          items:
            type: string
      required:
        - uid
        - name
        - employeeKind
        - serviceTypeBusinessDirection
        - directionKind

    ServiceSet:
      $ref: "#/components/schemas/PackageForPurchase"

    PackageForPurchase:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
          description: наименование
          example: Танцевальная программа
        directionKinds:
          type: array
          items:
            $ref: "#/components/schemas/DirectionKind"
        shortDescription:
          type: string
          description: краткое описание пакета услуг
        photo:
          type: string
          description: url фотографии
        price:
          type: number
          format: double
          description: цена
        serviceSetTypes:
          type: array
          items:
            $ref: "#/components/schemas/ServiceSetType"
        services:
          type: array
          items:
            $ref: "#/components/schemas/PackageForPurchaseService"
      required:
        - uid
        - name
        - shortDescription
        - directionKinds
        - photo
        - price
        - serviceSetTypes
        - services

    ConstructorPackageEntry:
      type: object
      properties:
        uid:
          type: string
          description: Идентификатор услуги
        name:
          type: string
          description: Наименование услуги
        shortDescription:
          type: string
          description: Краткое описание услуги
        entryType:
          type: string
          description: 'Тип услуги: персональная тренировка или групповой урок или курс или урок'
          enum:
            - personal
            - group
            - course
            - lesson
        duration:
          type: number
          format: double
          description: длительность услуги
        employeeKind:
          type: string
          description: категория сотрудника
        photo:
          type: string
          description: фотография
        serviceType:
          type: string
          description: тип услуги
      required:
        - uid
        - name
        - entryType
        - shortDescription
        - duration
        - employeeKind
        - photo
        - serviceType

    PackageService:
      type: object
      properties:
        name:
          type: string
        serviceType:
          type: string
          description: 'тип объекта: услуга или сегмент'
          enum:
            - service
            - package
        quantity:
          type: integer
          description: Количество услуг/сегментов
        entryList:
          type: array
          items:
            $ref: "#/components/schemas/ConstructorPackageEntry"
      required:
        - name
        - serviceType
        - quantity
        - entryList

    ConstructorPackage:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор пакета услуг
        amount:
          type: number
          format: double
        amountDiscount:
          type: number
          format: double
        quantity:
          type: number
          format: double
        serviceSetType:
          $ref: "#/components/schemas/ServiceSetType"
        serviceList:
          type: array
          items:
            $ref: "#/components/schemas/PackageService"
      required:
        - uid
        - amount
        - amountDiscount
        - quantity
        - serviceSetType
        - serviceList

    PackageConstructorData:
      type: object
      properties:
        photoList:
          type: array
          items:
            type: string
            description: url фото
        packageList:
          type: array
          items:
            $ref: "#/components/schemas/ConstructorPackage"
        hasContract:
          type: boolean
          description: есть действующая карта
      required:
        - photoList
        - packageList

    PackageOrderList:
      type: array
      items:
        $ref: "#/components/schemas/PackageOrder"

    PackageOrder:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор абонемента или чека
        uidType:
          type: string
          description: тип идентификатора
          enum:
            - package
            - invoice
        amount:
          type: number
          format: double
          description: сумма документа
        number:
          type: string
          description: номер абонемента
      required:
        - uid
        - uidType
        - amount
        - number

    PackageActivation:
      type: object
      properties:
        startDate:
          type: string
          format: date
          description: Дата начала абонемент
        endDate:
          type: string
          format: date
          description: Дата окончания абонемента
      required:
        - startDate
        - endDate

    PackageReserve:
      type: object
      properties:
        debt:
          type: string
          description: долг
        quantity:
          type: number
          format: double
          description: количество
      required:
        - debt
        - quantity

    PackageCustomer:
      type: object
      properties:
        uid:
          type: string
          description: Идентификатор клиента
        name:
          type: string
          description: ФИО клиента
        main:
          type: boolean
          description: флаг определяет является ли клиент основным по абонементу
      required:
        - uid
        - name
        - main

    PackageGym:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор клуба
        name:
          type: string
          description: имя клуба
        main:
          type: boolean
          description: флаг показывающий является ли данный клуб основным по  пакету
      required:
        - uid
        - name
        - main

    Package:
      description: пакет
      type: object
      properties:
        uid:
          type: string
          description: Идентификатор пакета услуг
        code:
          type: string
          description: Код пакета услуг
        name:
          type: string
          description: Наименование пакета услуг
        photo:
          type: string
          description: фото
        serviceQuantity:
          type: number
          format: double
          description: Остаток услуг
        gymList:
          type: array
          description: Клубы пакета
          items:
            $ref: "#/components/schemas/PackageGym"
        serviceList:
          type: array
          description: массив с услугами, входящий в пакет
          items:
            $ref: "#/components/schemas/PackageService"
        status:
          type: string
          description: Статус контракта
          enum:
            - active
            - inactive
            - waiting
            - inProgress
            - confirming
        amount:
          type: number
          format: double
          description: Сумма к оплате
        customerList:
          type: array
          description: Массив с данными о владельце пакета
          items:
            $ref: "#/components/schemas/PackageCustomer"
        reserve:
          description: информация о резервировании
          type: array
          items:
            $ref: "#/components/schemas/PackageReserve"
        reserveQuantity:
          type: number
          format: double
          description: количество зарезервированных услуг
        serviceSetType:
          $ref: "#/components/schemas/ServiceSetType"
        tags:
          type: array
          description: список тегов
          items:
            type: string
      required:
        - uid
        - code
        - name
        - photo
        - serviceQuantity
        - gymList
        - serviceList
        - status
        - amount
        - customerList
        - reserve
        - reserveQuantity
        - serviceSetType
        - tags

    PackageList:
      description: список пакетов клиента
      type: array
      items:
        $ref: "#/components/schemas/Package"

    PackageForPurchaseList:
      description: список пакетов к покупке
      type: array
      items:
        $ref: "#/components/schemas/PackageForPurchase"

    PackageHistories:
      type: object
      description: история
      required:
        - packageHistories
      properties:
        packageHistories:
          description: список пакетов к покупке
          type: array
          items:
            $ref: "#/components/schemas/PackageHistory"

    PackageHistory:
      type: object
      required:
        - date
        - operation
        - description
      properties:
        date:
          type: string
          format: date-time
          x-go-type: openapi.CustomTime
          description: дата операции
          example: "2023-02-09T10:39:44"
        operation:
          type: string
          description: наименование операции
          example: Sale
        description:
          type: string
          description: описание операции
          example: Sale

    PaymentServiceList:
      description: список услуг к оплате
      type: array
      items:
        $ref: "#/components/schemas/ServicePayment"

    ServicePayment:
      type: object
      description: Услуга к оплате
      properties:
        docId:
          type: string
          description: идентификатор документа
          format: uuid
          example: 076d27f7-5b18-4f5f-855e-aa6532a0a1e1
        docType:
          type: string
          description: тип документа
          enum:
            - invoice
            - personal
            - group
          example: invoice
        docName:
          type: string
          description: общее название услуги
        serviceList:
          type: array
          description: массив с услугами
          items:
            $ref: "#/components/schemas/PaymentService"
        date:
          type: string
          description: дата оказания услуги
          example: 2021-12-24T19:30:00
        gym:
          type: string
          description: наименование клуба
        amount:
          type: number
          format: double
          description: прайсовая цена всех услуг
        discountedAmount:
          type: number
          format: double
          description: сумма со скидкой
        trainerSurname:
          type: string
          description: фамилия тренера
        trainerName:
          type: string
          description: имя тренера
        trainerPhoto:
          type: string
          description: фото тренера
        photo:
          type: string
          description: фото услуги
      required:
        - docId
        - docType
        - serviceList
        - date
        - gym
        - amount
        - photo

    PaymentService:
      type: object
      properties:
        name:
          type: string
          description: наименование описания услуги
        quantity:
          type: number
          format: double
          description: количество
        price:
          type: number
          format: double
          description: прайсовая цена
        photo:
          type: string
          description: фото
      required:
        - name
        - quantity
        - price
        - photo

    ServiceEntry:
      type: object
      description: описание услуги
      required:
        - uid
        - type
      properties:
        uid:
          type: string
          description: идентификатор услуги
        type:
          $ref: "#/components/schemas/ServiceType"

    ServiceInfo:
      description: Карточка услуги
      type: object
      required:
        - uid
        - name
        - shortDescription
        - fullDescription
        - photoList
        - tags
        - addDescription
        - entryList
        - price
        - objectives
        - bookingAvailable
      properties:
        objectives:
          type: array
          items:
            $ref: "#/components/schemas/UserShortObjective"
        uid:
          type: string
          description: идентификатор услуги
          minLength: 36
          maxLength: 36
          format: uuid
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
        name:
          type: string
          description: имя услуги
        shortDescription:
          type: string
          description: краткое описание услуги
        fullDescription:
          type: string
          description: полное описание услуги
        photoList:
          type: array
          items:
            type: string
            description: фото
        tags:
          type: array
          description: список тегов
          items:
            type: string
        addDescription:
          type: string
          description: блок с важной информацией
        price:
          type: number
          description: цена
          format: double
        bookingAvailable:
          type: boolean
          description: Возможна ли запись на услугу
          default: false
        entryList:
          type: array
          items:
            $ref: "#/components/schemas/ServiceEntry"
        gym:
          $ref: "#/components/schemas/ServiceGym"

    ServiceSetList:
      type: object
      required:
        - serviceSets
        - tags
      properties:
        serviceSets:
          type: array
          items:
            $ref: "#/components/schemas/ServiceSet"
        tags:
          type: array
          items:
            type: string
            description: теги наборов услуг для фильтрации

    ServicesFromFavoriteGyms:
      type: object
      required:
        - services
      properties:
        services:
          type: array
          items:
            $ref: "#/components/schemas/ServiceFromFavoriteGym"

    ServiceFromFavoriteGym:
      type: object
      required:
        - uid
        - name
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
          description: название услуги

    Chain:
      type: object
      properties:
        availableSections:
          description: доступные разделы
          items:
            enum:
              - packageInfo
              - membershipInfo
              - bonus
              - rentedLockerList
              - paymentPackage
              - bannerList
              - nearestService
              - support
              - balance
              - familyAccount
              - financialHistory
            type: string
          type: array
        code:
          description: код сети
          type: integer
        countryCode:
          $ref: "#/components/schemas/CountryCode"
        currencySymbol:
          description: символ национальной валюты
          type: string
        name:
          description: наименование сети
          type: string
        pdn:
          description: ссылка на пдн
          type: string
        rules:
          description: ссылка на правил
          type: string
        phone:
          description: номер телефона техподдержки
          type: string
        email:
          description: почта техподдержки
          type: string
      required:
        - code
        - availableSections
        - name
        - currencySymbol
        - countryCode
        - rules
        - pdn
        - phone
        - email
    ChainList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Chain"

    AuthInfo:
      type: object
      properties:
        ChainList:
          $ref: "#/components/schemas/ChainList"
        CountryCodes:
          $ref: "#/components/schemas/CountryCodes"

    HoldingCode:
      type: object
      properties:
        holdingCode:
          type: integer
          description: код холдинга
      required:
        - holdingCode

    CountryCodes:
      type: array
      items:
        $ref: "#/components/schemas/CountryCode"
    CountryCode:
      properties:
        code:
          description: код страны
          example: "+7"
          type: string
        mask:
          description: маска телефонного номера
          example: "(###) ###-##-##"
          type: string
      required:
        - code
        - mask
      title: countryCode
      type: object

    Coords:
      type: object
      description: координаты
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          description: широта
          example: 41.27
        longitude:
          type: number
          description: долгота
          example: 22.15

    Segment:
      type: object
      description: сегмент клуба
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - luxury
            - classic
            - light

    Metro:
      type: object
      description: метро
      properties:
        name:
          type: string
          description: наименование
          example: Сокольники
        lineColor:
          type: string
          description: телефон
          example: red
        lineName:
          type: string
          description: время работы в будни
          example: red
        lineNumber:
          type: string
          description: время  работы в выходные и праздники
          example: red
      required:
        - name
        - lineColor
        - lineName
        - lineNumber
    MetroList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Metro"

    Photo:
      type: string
      description: ссылка на фото
    PhotoList:
      type: array
      description: ссылка на фото
      items:
        $ref: "#/components/schemas/Photo"

    DeviceInfo:
      type: object
      properties:
        appType:
          type: string
          description: тип приложения
          enum:
            - Customer
            - Employee
            - Web
        appVersion:
          type: integer
          default: 101
          description: версия приложения
        deviceModel:
          type: string
          description: модель устройства
          example: iPhone 7
        deviceToken:
          type: string
          description: токен устройства
          example: 2d181c7d7289b049a2a735b1e1f6e94c72354ea686ab9f09d280e6619046e70a
        systemType:
          type: string
          description: тип операционной системы
          enum:
            - Android
            - iOS
            - Web
          example: iOS
        systemVersion:
          type: string
          description: версия операционной системы
          example: "12.2"
      required:
        - appType
        - appVersion
        - deviceModel
        - deviceToken
        - systemType
        - systemVersion

    UserProfile:
      type: object
      description: профиль пользователя
      required:
        - registrationDate
        - phone
        - birthdate
        - firstName
        - secondName
        - lastName
        - gender
        - email
        - status
        - canUpdatePersonalData
        - photo
        - rating
        - subscriptionEmail
        - subscriptionSms
        - barcode
        - uid
        - showSupportChat
      properties:
        registrationDate:
          type: string
          format: date-time
          x-go-type: openapi.CustomTime
          description: дата регистрации в ЛК
          example: "1971-09-18T00:00:00"
        phone:
          type: string
          description: телефон
          example: "+73232323223"
        birthdate:
          type: string
          format: date-time
          x-go-type: openapi.CustomTime
          description: дата рождения
          example: "1971-09-18T00:00:00"
        firstName:
          type: string
          description: имя
          example: "John"
        secondName:
          type: string
          description: отчество
          example: "Wayne"
        lastName:
          type: string
          description: фамилия
          example: "Silverhand"
        gender:
          type: string
          description: пол
          enum:
            - male
            - female
            - none
        email:
          type: string
          description: электронная почта
          example: "Baylee92@example.com"
          # format: email
        status:
          type: string
          description: статус пользователя connect
          enum:
            - active
            - missingPersonalData
            - unauthorized
        canUpdatePersonalData:
          type: boolean
          description: Флаг разрешающий обновлять персональные данные
        photo:
          type: string
          description: URL фотографии
        rating:
          type: string
          description: рейтинг
        subscriptionEmail:
          type: boolean
          description: подписка на письма
        subscriptionSms:
          type: boolean
          description: подписка на смс
        barcode:
          type: string
          description: штрихкод
          example: "2000115151237"
        uid:
          type: string
          format: uuid
          description: идентификатор
          example: "af95922c-82ea-11ea-bc0a-005056b15dcf"
        showSupportChat:
          type: boolean
          description: показывать ли чат поддержки
          example: true
    UserList:
      type: array
      description: "список пользователей с одинаковым номером телефона в учетной системе. Если список пуст, значит был только один пользователь с этим номером"
      items:
        type: object
        properties:
          name:
            type: string
            description: представление пользователя
          uid:
            type: string
            format: uuid
            description: идентификатор пользователя
        required:
          - name
          - uid

    Token:
      required:
        - access
        - refresh
      type: object
      properties:
        access:
          type: string
          format: uuid
          description: ключ авторизации (токен)
        refresh:
          type: string
          format: uuid
          description: ключ обновления авторизации (токен)

    GenericStatusResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - ok
            - fail
          description: Результат выполнения операции
        message:
          type: string
          description: Поясняющее сообщение (для fail операции)
      required:
        - status
    CreateSessionResponse:
      required:
        - status
        - retryTime
      type: object
      properties:
        status:
          type: string
          description: Ok
          enum:
            - Ok
        retryTime:
          type: integer
          description: количество секунд до следующей отправки
    ConfirmSessionResponse:
      type: object
      properties:
        userProfile:
          $ref: "#/components/schemas/UserProfile"
        userList:
          $ref: "#/components/schemas/UserList"
        token:
          $ref: "#/components/schemas/Token"
    ChangeSessionResponse:
      type: object
      properties:
        userProfile:
          $ref: "#/components/schemas/UserProfile"
        token:
          $ref: "#/components/schemas/Token"
    UpdateProfileResponse:
      type: object
      properties:
        result:
          type: string
          description: Результат
      required:
        - result

    SaveNotificationDataResponse:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          description: Ok
          enum:
            - Ok

    ScheduleShortService:
      type: object
      description: услуга в расписании
      required:
        - uid
        - name
      properties:
        uid:
          type: string
          description: идентификатор услуги
        name:
          type: string
          description: наименование услуги
    ScheduleEmployee:
      type: object
      description: сотрудник
      required:
        - uid
        - firstName
        - lastName
        - objectives
      properties:
        uid:
          type: string
          description: идентификатор сотрудника
        firstName:
          type: string
          description: имя
        lastName:
          type: string
          description: фамилия
        objectives:
          $ref: "#/components/schemas/UserShortObjectives"
    ScheduleGym:
      description: клуб
      properties:
        name:
          type: string
        uid:
          type: string
          format: uuid
        phone:
          type: string
        hasAccess:
          type: boolean
#        type: | # ios error
#          type: string
#          enum:
#            - gym
#            - online
#            - studio
#            - outdoor
      required:
        - uid
        - name
        - phone
        - hasAccess
#        - type | # ios error
      type: object

    ScheduleOnlineRef:
      type: object
      properties:
        type:
          type: string
          description: на какой площадке транслируется тренировка
          enum:
            - youtube
            - vk
            - browser
        ref:
          type: string
          description: ссылка на трансляцию
      required:
        - type
        - ref

    Schedule:
      type: object
      properties:
        name:
          type: string
          description: Название тренировки
        description:
          type: string
          description: описание тренировки
        docId:
          type: string
          description: Идентификатор документа группового занятия
        paymentStatus:
          $ref: "#/components/schemas/PaymentStatus"
        photo:
          type: string
          description: URL фотографии
        ageMin:
          type: number
          format: double
          description: "минимальный возраст, в месяцах"
        ageMax:
          type: number
          format: double
          description: "максимальный возраст, в месяцах"
        serviceKindName:
          type: string
          description: вид деятельности
        status:
          type: string
          description: статус тренировки
          enum:
            - pending
            - inProgress
            - ended
        studentLevel:
          type: string
          description: уровень подготовки
          enum:
            - any
            - high
            - medium
            - beginner
        onlyWithParents:
          type: boolean
          description: при обязательном участии родителей
        onlyMembers:
          type: boolean
          description: только члены клуба
        trainer:
          $ref: "#/components/schemas/ScheduleEmployee"
        service:
          $ref: "#/components/schemas/ScheduleShortService"
        startDate:
          description: время начала
          example: "2019-07-01T10:00:00"
          format: date-time
          x-go-type: openapi.CustomTime
          type: string
        endDate:
          description: время окончания
          example: "2019-07-01T10:00:00"
          format: date-time
          x-go-type: openapi.CustomTime
          type: string
        roomName:
          type: string
          description: Наименование помещения
        recorded:
          type: boolean
          description: Признак записи клиента на урок
        price:
          type: number
          format: double
          description: Цена
        canRecord:
          type: boolean
          description: Признак возможности записаться
        canCancel:
          type: boolean
          description: Признак возможности отменить запись на урок
        availablePlaces:
          type: number
          format: double
          description: |
            Количество доступных мест
            Если от 1С пришло значение availablePlaces в интервале от 7 и более, то передаем в МП, что тренировка не очень загружена
            Если от 1С пришло значение availablePlaces в интервале от 4-6, то передаем в МП, что загрузка тренировки средняя
            Если от 1С пришло значение availablePlaces в интервале от 1-3, то передаем в МП, что тренировка очень загруженная
        type:
          type: string
          enum:
            - gym
            - online
            - studio
            - outdoor
        tags:
          type: array
          items:
            type: string
        onlineRefs:
          type: array
          items:
            $ref: "#/components/schemas/ScheduleOnlineRef"
        gym:
          $ref: "#/components/schemas/ScheduleGym"
        objectives:
          $ref: "#/components/schemas/UserShortObjectives"
      required:
        - docId
        - name
        - photo
        - startDate
        - endDate
        - roomName
        - ageMin
        - ageMax
        - recorded
        - price
        - paymentStatus
        - canRecord
        - canCancel
        - availablePlaces
        - type
        - tags
        - gym
        - trainer
        - service
        - objectives
        - description
        - studentLevel
        - onlyWithParents
        - onlyMembers

    ScheduleResponse:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        schedules:
          type: array
          items:
            $ref: "#/components/schemas/Schedule"
        objectives:
          $ref: "#/components/schemas/UserObjectives"
        gyms:
          type: array
          description: список уникальных клубов в расписании
          items:
            $ref: "#/components/schemas/ScheduleGym"
        filters:
          $ref: "#/components/schemas/PersonalFilters"
      required:
        - tags
        - schedules
        - objectives
        - gyms
        - filters

    PersonalFilters:
      type: object
      properties:
        partDayFilters:
          description: Время начала занятия
          type: array
          items:
            $ref: "#/components/schemas/PartDay"
        ageFilters:
          $ref: "#/components/schemas/AgeFilters"
        paymentTypeFilters:
          $ref: "#/components/schemas/PaymentTypeFilters"

    AgeFilters:
      type: object
      description: Возраст для тренировки
      properties:
        ageMin:
          type: integer
          description: Значение возраста в месяцах
        ageMax:
          type: integer
          description: Значение возраста в месяцах

    TrainerCategory:
      type: object
      description: категория тренера
      properties:
        name:
          description: наименование категории сотрудника
          type: string
        serviceKind:
          description: наименование направления
          type: string
        serviceType:
          type: string
          description: тип направления
          enum:
            - spa
            - fitness
      required:
        - serviceKind
        - serviceType

    GymTypeBase:
      type: object
      description: Базовое описание клуба
      properties:
        uid:
          type: string
          description: идентификатор клуба
          minLength: 36
          maxLength: 36
          format: uuid
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
        type:
          type: string
          description: тип клуба
          enum:
            - gym
            - online
            - studio
            - outdoor
        name:
          type: string
          description: наименование клуба
          example: "Sport Day"
        hasAccess:
          type: boolean
          description: флаг доступа пользователя к клубу
      required:
        - uid
        - type
        - name
        - hasAccess

    TrainerBase:
      type: object
      description: тренер
      properties:
        uid:
          type: string
          description: идентификатор тренера
          format: uuid
        firstName:
          type: string
          description: имя
        lastName:
          type: string
          description: фамилия
        photo:
          type: string
          description: URL фотографии
        isMyCoach:
          type: boolean
          description: признак принадлежности. поле не используется и заполняется на бэке false без логики (для совместимости)
        gender:
          type: string
          description: пол
        categoryTrainer:
          type: string
          description: категория тренера
        categories:
          type: array
          description: категории сотрудников
          items:
            $ref: "#/components/schemas/TrainerCategory"
        gym:
          type: array
          items:
            $ref: "#/components/schemas/GymTypeBase"
        objectives:
          $ref: "#/components/schemas/UserShortObjectives"
        liked:
          type: boolean
          description: признак избранного тренера
      required:
        - uid
        - firstName
        - lastName
        - photo
        - isMyCoach
        - gender
        - objectives
        - liked

    Trainer:
      allOf:
        - $ref: '#/components/schemas/TrainerBase'
        - type: object
          required:
            - categoryTrainer
            - categories
            - gym
          properties:
            categoryTrainer:
              type: string
              description: категория тренера
            categories:
              type: array
              description: категории сотрудников
              items:
                $ref: "#/components/schemas/TrainerCategory"
            gym:
              type: array
              items:
                $ref: "#/components/schemas/GymTypeBase"

    TrainerCard:
      type: object
      description: тренер
      properties:
        uid:
          type: string
          description: идентификатор тренера
          format: uuid
        firstName:
          type: string
          description: имя
        lastName:
          type: string
          description: фамилия
        categoryTrainer:
          type: string
          description: категория тренера
        photos:
          type: array
          items:
            type: string
          description: фотографии
        isMyCoach:
          type: boolean
          description: признак принадлежности
        gender:
          type: string
          description: пол
        presentation:
          type: array
          description: презентация тренера
          items:
            $ref: "#/components/schemas/TrainerPresentation"
        tagList:
          type: array
          description: список тегов
          items:
            $ref: "#/components/schemas/TrainerTag"
        gyms:
          $ref: "#/components/schemas/TrainerCardGymList"
        objectives:
          $ref: "#/components/schemas/TrainerCardObjectives"
        liked:
          type: boolean
          description: признак избранного тренера
        bookingAvailable:
          type: boolean
          description: Возможна ли запись к тренеру на какую-либо услугу
          default: false
      required:
        - uid
        - firstName
        - lastName
        - categoryTrainer
        - photos
        - isMyCoach
        - gender
        - presentation
        - gyms
        - tagList
        - objectives
        - liked
        - bookingAvailable

    TrainerTag:
      type: object
      properties:
        tag:
          type: string
          description: наименование тега
        weight:
          type: number
          description: вес
        level:
          type: number
          description: уровень
      required:
        - tag
        - weight
        - level

    TrainerPresentation:
      type: object
      properties:
        section:
          type: string
          description: наименование секции
        description:
          type: array
          description: описание
          items:
            type: string
      required:
        - section
        - description

    TrainerCardGymList:
      type: array
      items:
        $ref: "#/components/schemas/TrainerCardGym"

    TrainerCardGym:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор клуба
          minLength: 36
          maxLength: 36
          format: uuid
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
        name:
          type: string
          description: наименование клуба
          example: "Sport Day"
        hasAccess:
          type: boolean
          description: флаг доступа пользователя к клубу
      required:
        - uid
        - name
        - hasAccess

    TrainerCardObjective:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор цели
          minLength: 36
          maxLength: 36
          format: uuid
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
        name:
          type: string
          description: наименование цели
          example: "Wellness"
        color:
          type: string
          description: цвет цели
          example: "#C7E1B4"
      required:
        - uid
        - name
        - color

    TrainerCardObjectives:
      type: array
      items:
        $ref: "#/components/schemas/TrainerCardObjective"

    TrainerArray:
      type: array
      items:
        $ref: "#/components/schemas/Trainer"

    TrainerBaseArray:
      type: array
      items:
        $ref: "#/components/schemas/TrainerBase"

    TrainersResponse:
      type: object
      properties:
        trainers:
          $ref: "#/components/schemas/TrainerArray"
        objectives:
          $ref: "#/components/schemas/UserObjectives"

    TrainersLikedResponse:
      type: object
      properties:
        trainers:
          $ref: "#/components/schemas/TrainerBaseArray"
        objectives:
          $ref: "#/components/schemas/UserObjectives"

    TrainersFromFavoriteGymResponse:
      type: object
      required:
        - trainers
      properties:
        trainers:
          type: array
          items:
            $ref: "#/components/schemas/TrainerFromFavoriteGym"

    TrainerFromFavoriteGym:
      type: object
      required:
        - uid
        - firstName
        - lastName
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        firstName:
          type: string
          description: имя
        lastName:
          type: string
          description: фамилия

    FreeDateForPrebooking:
      type: object
      properties:
        date:
          description: дата
          type: string
          format: date-time
          x-go-type: openapi.CustomTime
          example: "2022-06-06T08:00:00"
        hoursList:
          type: array
          description: список часов
          items:
            type: string
            format: date-time
            x-go-type: openapi.CustomTime
            example: "2022-06-06T12:00:00"

    TrainersFreeDateResponse:
      type: array
      items:
        $ref: "#/components/schemas/FreeDateForPrebooking"

    TrainersServices:
      type: array
      items:
        $ref: "#/components/schemas/TrainersService"

    TrainersService:
      type: object
      properties:
        duration:
          description: "продолжительность, мин"
          type: integer
          example: 10
        trainerKind:
          description: категория тренера
          type: string
          example: fitness
        name:
          description: наименование услуги
          type: string
        price:
          description: прайсовая цена
          type: number
        uid:
          description: идентификатор услуги
          type: string
          format: uuid
        serviceType:
          type: string
          description: Бизнес направление услуги (фиснес или СПА)
          enum:
            - spa
            - fitness
        serviceKind:
          description: наименование направления
          type: string
        objectives:
          $ref: "#/components/schemas/UserShortObjectives"
      required:
        - uid
        - duration
        - name
        - trainerKind
        - price
        - serviceType
        - serviceKind
        - objectives

    TrainersServicesResponse:
      type: object
      properties:
        services:
          $ref: "#/components/schemas/TrainersServices"
        objectives:
          $ref: "#/components/schemas/UserObjectives"
      required:
        - services
        - objectives

    TrainersServiceByGroup:
      type: object
      properties:
        name:
          type: string
        uids:
          type: array
          items:
            type: string
            format: uuid
      required:
        - name
        - uids

    TrainersServicesByGroupResponse:
      type: array
      description: наименование направления
      items:
        $ref: "#/components/schemas/TrainersServiceByGroup"

    Service:
      type: object
      properties:
        docId:
          type: string
          description: Идентификатор тренировки
        docType:
          type: string
          description: Тип тренировки
          enum:
            - group
            - personal
            - visit
            - guestVisit
            # Тип для персональных тренировок
            - prebooking
        customer:
          description: Идентификатор клиента
          type: string
      required:
        - docId
        - docType
        - customer

    Services:
      type: array
      items:
        $ref: "#/components/schemas/Service"

    PrebookingService:
      description: Сгруппированная по имени подуслуг услуга (по смыслу совпадает с услугой-продуктом, но формируется с другого конца)
      type: object
      required:
        - uid
        - name
        - photo
        - entries
        - liked
        - objectives
      properties:
        uid:
          description: идентификатор услуги (продукта)
          type: string
          format: uuid
        name:
          description: наименование услуги
          type: string
        photo:
          description: изображение услуги
          type: string
        liked:
          description: добавлена ли услуга в Избранное
          type: boolean
          default: false
        objectives:
          $ref: "#/components/schemas/UserShortObjectives"
        entries:
          type: array
          items:
            $ref: "#/components/schemas/PrebookingServiceEntry"

    PrebookingServiceEntry:
      type: object
      properties:
        duration:
          description: "продолжительность, мин"
          type: integer
          example: 10
        trainerKind:
          description: категория тренера
          type: string
          example: fitness
        price:
          description: прайсовая цена
          type: number
        uid:
          description: идентификатор конкретной подуслуги
          type: string
          format: uuid
        serviceType:
          type: string
          description: Бизнес направление (фиснес или СПА)
          enum:
            - spa
            - fitness
        serviceKind:
          description: наименование направления
          type: string
      required:
        - uid
        - duration
        - name
        - trainerKind
        - price
        - serviceType
        - serviceKind

    PrebookingGym:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор клуба
          minLength: 36
          maxLength: 36
          format: uuid
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
        name:
          type: string
          description: наименование клуба
          example: "Sport Day"
        type:
          type: string
          enum:
            - gym
            - online
            - studio
            - outdoor
          description: тип клуба
          example: "Everyday"
        address:
          type: string
          description: адрес клуба
          example: "Русаковская 31"
        segment:
          $ref: "#/components/schemas/Segment"
        coords:
          $ref: "#/components/schemas/Coords"
        metro:
          $ref: "#/components/schemas/MetroList"
        photos:
          $ref: "#/components/schemas/PhotoList"
      required:
        - departments
        - uid
        - name
        - type
        - address
        - segment
        - coords
        - photos

    PrebookingTrainer:
      type: object
      description: тренер
      properties:
        uid:
          type: string
          description: идентификатор тренера
          format: uuid
        firstName:
          type: string
          description: имя
        lastName:
          type: string
          description: фамилия
        photo:
          type: string
          description: URL фотографии
        objectives:
          $ref: "#/components/schemas/UserShortObjectives"
        categories:
          type: array
          description: категории сотрудников
          items:
            $ref: "#/components/schemas/TrainerCategory"
        liked:
          type: boolean
          description: признак избранного тренера

      required:
        - uid
        - firstName
        - lastName
        - photo
        - objectives
        - categories
        - liked

    PrebookingResponse:
      type: object
      properties:
        dates:
          type: array
          items:
            $ref: "#/components/schemas/FreeDateForPrebooking"
        services:
          type: array
          items:
            $ref: "#/components/schemas/PrebookingService"
        trainers:
          type: array
          items:
            $ref: "#/components/schemas/PrebookingTrainer"
        objectives:
          $ref: "#/components/schemas/UserObjectives"
        gym:
          $ref: "#/components/schemas/PrebookingGym"
      required:
        - dates
        - services
        - trainers
        - objectives
        - gym

    PrebookingReserveResponse:
      type: object
      properties:
        service:
          $ref: "#/components/schemas/Service"
        pageType:
          $ref: "#/components/schemas/PageType"
      required:
        - service
        - pageType

    ReserveScheduleResponse:
      type: object
      properties:
        services:
          $ref: "#/components/schemas/Services"
        schedule:
          $ref: "#/components/schemas/Schedule"
        pageType:
          $ref: "#/components/schemas/PageType"

    CancelScheduleResponse:
      type: object
      properties:
        services:
          $ref: "#/components/schemas/Services"
        schedule:
          $ref: "#/components/schemas/Schedule"

    PersonalResponse:
      type: object
      properties:
        services:
          $ref: "#/components/schemas/Services"
        pageType:
          $ref: "#/components/schemas/PageType"
      required:
        - services
        - pageType

    ProfileLikedResponse:
      type: object
      properties:
        gyms:
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Club"
            count:
              type: integer
          required:
            - items
            - count
        spa_services:
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/ServiceItem"
            count:
              type: integer
          required:
            - items
            - count
        fitness_services:
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/ServiceItem"
            count:
              type: integer
          required:
            - items
            - count
        trainers:
          properties:
            items:
              $ref: "#/components/schemas/TrainerBaseArray"
            count:
              type: integer
          required:
            - items
            - count
      required:
        - gyms
        - spa_services
        - fitness_services
        - trainers

    PageType:
      description: тип страницы перехода
      type: string
      enum:
        - activity
        - payment

    Banner:
      type: object
      properties:
        imageURL:
          type: string
          description: ссылка на фото
        videoURL:
          type: string
          description: ссылка на видео
        text:
          type: string
          description: ближайшая активность
        order:
          type: number
          description: порядок следования баннера
        externalUrl:
          type: string
          description: url
        buttonText:
          type: string
          description: текст кнопки
        activity:
          $ref: "#/components/schemas/ClubActivity"
        event:
          $ref: "#/components/schemas/EventBanner"
        serviceDebtCount:
          type: integer
          description: число неоплаченных услуг
          example: 3
        serviceDebtAmount:
          type: number
          format: double
          description: сумма неоплаченных услуг
          example: 100500.00
        type:
          type: string
          enum:
            - media
            - service-debt
            - adv-clip-card
      required:
        - text
        - order
        - type

    ActivityTrainer:
      type: object
      description: тренер
      required:
        - uid
        - firstName
        - lastName
        - photo
      properties:
        uid:
          type: string
          description: идентификатор тренера
        firstName:
          type: string
          description: имя
        lastName:
          type: string
          description: фамилия
        photo:
          type: string
          description: фотография тренера

    ActivityBall:
      type: array
      description: Шар активности
      items:
        $ref: "#/components/schemas/ActivityBallComponent"

    ActivityStatCurrentObjective:
      type: object
      properties:
        activitiesCount:
          type: integer
          description: количество тренировок по выбранной цели
        id:
          type: string
          description: идентификатор цели
          example: e762e10f-e667-4cbb-a356-fa227314a241
        color:
          type: string
          description: цвет
          example: "#FF0000"
        name:
          type: string
          description: имя цели
          example: Похудение
      required:
        - activitiesCount
        - id
        - color
        - name

    ActivityStat:
      type: object
      properties:
        ball:
          type: array
          items:
            $ref: "#/components/schemas/ActivityBallComponent"
        hint:
          $ref: "#/components/schemas/Hint"
        currentObjective:
          $ref: "#/components/schemas/ActivityStatCurrentObjective"
        activitiesCount:
          type: integer
          description: общее количество активностей за последние 30 дней
      required:
        - ball
        - activitiesCount

    Hint:
      type: object
      description: объект подсказки
      properties:
        type:
          type: string
          description: |
            тип подсказки
            * noObjective - советуем цель когда понимаем, по какой цели движется клиент. цель у клиента не выбрана
            * differentObjective - когда занимаемся не по своей цели
            * noVisits - за последние 7 дней не было тренировок
          enum:
            - noObjective
            - differentObjective
            - noVisits
        objective:
          $ref: "#/components/schemas/ActivityObjective"
      required:
        - type

    ActivityBallComponent:
      type: object
      description: компонент шара активности (цветной шар)
      properties:
        name:
          type: string
          description: название параметра
          example: welness
        activityValue:
          type: number
          format: double
          description: рассчитанное значение параметра (для отрисовки используем position и angle)
          example: 73.0
        position:
          type: number
          format: double
          description: >-
            смещение шара на оси, проведенной из центра главного шара под angle.
            значение 100 соответствует центру цветного шара на окружности главного,
            значение 200 соответствует центру цветного шара в центре главного,
            значение 0 соответствует отстоянию цветного шара от окружности главного на радиус цветного шара
          minimum: 0.0
          maximum: 200.0
          example: 50.0
        angle:
          type: number
          format: double
          description: угол оси движения шара
          minimum: 0.0
          maximum: 360.0
          example: 60.0
        size:
          type: number
          format: double
          description: размер шара в процентах относительно главного шара
          minimum: 0.0
          maximum: 100.0
          example: 80.0
        blur:
          type: integer
          description: значение размытия
          minimum: 0
          maximum: 100
          example: 30
        z-index:
          type: integer
          description: вес для вычисления положения слоя (чем больше, тем выше)
          example: 5
        color:
          type: string
          description: hex-код цвета для цветного шара
          example: "#aabbcc"
        objective:
          type: boolean
        description:
          type: string
      required:
        - name
        - activityValue
        - position
        - angle
        - size
        - blur
        - z-index
        - color
        - objective
        - description

    Room:
      type: object
      description: помещение
      properties:
        uid:
          type: string
          description: идентификатор помещения
        name:
          type: string
          description: наименование
      required:
        - uid
        - name

    ScheduleService:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор описания услуги
        name:
          description: наименование описания услуги
          type: string
        debt:
          type: boolean
          description: долг
        quantity:
          type: integer
          description: Количество услуг
          format: int32
        photo:
          type: string
          description: Фото услуги
        price:
          type: number
          description: цена услуги
          format: double
      required:
        - uid
        - name
        - debt
        - quantity
        - photo
        - price

    ActivityTypeHistoryFilter:
      type: string
      description: Тип активности для фильтрации
      enum:
        - self
        - group
        - personal
        - visit
      example: group

    ActivityPaymentTypeHistoryFilter:
      type: string
      description: Тип активности по признаку оплаты для фильтрации
      enum:
        - free
        - paid
      example: free

    ActivityObjectivesHistoryFilter:
      type: array
      description: Идентификатор цели для фильтрации истории активности
      items:
        type: string
        format: uuid
        example: 3f1225f6-cb40-11e9-bba8-005056b11c48

    ActivityTrainersHistoryFilter:
      type: array
      description: Список идентификаторов тренеров, по которым необходимо отфильтровать историю активностей
      items:
        type: string
        format: uuid
        example: 3f1225f6-cb40-11e9-bba8-005056b11c48

    ActivityServicesHistoryFilter:
      type: array
      description: Список идентификаторов услуг, по которым необходимо отфильтровать историю активностей
      items:
        type: string
        format: uuid
        example: 3f1225f6-cb40-11e9-bba8-005056b11c48

    ActivityObjective:
      type: object
      properties:
        id:
          type: string
          description: идентификатор цели
          example: e762e10f-e667-4cbb-a356-fa227314a241
        color:
          type: string
          description: цвет
          example: "#FF0000"
        name:
          type: string
          description: имя цели
          example: Похудение
      required:
        - id
        - color
        - name

    ActivityGym:
      type: object
      description: клуб
      required:
        - uid
        - name
        - phone
      properties:
        uid:
          type: string
          description: идентификатор клуба
        name:
          type: string
          description: наименование клуба
        type:
          type: string
          enum:
            - outdoor
            - gym
            - online
            - studio
          description: тип клуба
        phone:
          type: string
          description: телефон

    ActivitiesHistoryServices:
      type: object
      required:
        - services
      properties:
        services:
          type: array
          items:
            $ref: "#/components/schemas/ActivitiesHistoryService"

    ActivitiesHistoryService:
      type: object
      required:
        - uid
        - name
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
          description: название услуги

    ActivitiesHistoryTrainers:
      type: object
      required:
        - trainers
      properties:
        trainers:
          type: array
          items:
            $ref: "#/components/schemas/ActivitiesHistoryTrainer"

    ActivitiesHistoryTrainer:
      type: object
      required:
        - uid
        - name
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
          description: ФИО тренера

    ActivitiesResponse:
      type: object
      description: Ответ со списком активностей
      required:
        - activities
        - isLastPage
      properties:
        isLastPage:
          type: boolean
          description: Признак окончания выборки при скролле
        activities:
          type: array
          items:
            $ref: "#/components/schemas/Activity"

    ActivitiesPlannedResponse:
      type: object
      description: Ответ со списком запланированных активностей
      required:
        - activities
        - totalPlanned
      properties:
        activities:
          type: array
          items:
            $ref: "#/components/schemas/ClubActivity"
        totalPlanned:
          type: integer
          description: общее число запланированных активностей
          example: 5

    Activity:
      type: object
      description: Активность
      required:
        - uid
        - type
        - activity
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        type:
          $ref: "#/components/schemas/ActivityType"
        activity:
          oneOf:
            - $ref: "#/components/schemas/SelfActivity"
            - $ref: "#/components/schemas/ClubActivity"

    ActivityType:
      type: string
      description: Тип активности
      enum:
        - self
        - club
      example: club

    ClubActivity:
      type: object
      properties:
        docId:
          type: string
          description: Идентификатор тренировки
        docType:
          type: string
          description: Тип тренировки
          enum:
            - group
            - personal
            - visit
            - guestVisit
            # Тип для персональных тренировок
            - prebooking
        trainer:
          $ref: "#/components/schemas/ActivityTrainer"
        name:
          description: наименование описания услуги
          type: string
        startDate:
          description: время начала
          example: "2019-07-01T10:00:00"
          format: date-time
          x-go-type: openapi.CustomTime
          type: string
        endDate:
          description: время окончания
          example: "2019-07-01T10:00:00"
          format: date-time
          x-go-type: openapi.CustomTime
          type: string
        canCancel:
          type: boolean
          description: Признак возможной отмены
        canRegistrate:
          type: boolean
          description: Признак возможной повторной записи
        photo:
          type: string
          description: Фото услуги
        paymentStatus:
          $ref: "#/components/schemas/PaymentStatus"
        room:
          $ref: "#/components/schemas/Room"
        gym:
          $ref: "#/components/schemas/ActivityGym"
        serviceList:
          type: array
          items:
            $ref: "#/components/schemas/ScheduleService"
        serviceEntry:
          type: string
          description: id записи
        objectives:
          type: array
          items:
            $ref: "#/components/schemas/ActivityObjective"
      required:
        - startDate
        - endDate
        - name
        - docId
        - docType
        - canCancel
        - canRegistrate
        - paymentStatus
        - gym
        - objectives
        - serviceList
        - serviceEntry

    ProfileDashboard:
      type: object
      required:
        - cardsCount
        - packagesCount
        - likedCount
      properties:
        status:
          $ref: "#/components/schemas/UserRating"
        cardsCount:
          type: integer
          description: Количество клубных карт у пользователя
          example: 2
        packagesCount:
          type: integer
          description: Количество активных пакетов услуг
          example: 3
        likedCount:
          type: integer
          description: Количество элементов, добавленных в избранное
          example: 5
        cardTips:
          type: array
          items:
            $ref: "#/components/schemas/DashboardCardTip"

    DashboardCardTip:
      type: object
      properties:
        title:
          type: string
          description: заголовок подсказки
        description:
          type: string
          description: описание подсказки
        buttonText:
          type: string
          description: текст кнопки
        type:
          type: string
          enum:
            - getNewCard
            - waitingForFullPayment
            - waitingForPartialPayment
            - waitingForActivation
            - waitingSignForTinkoff
            - cardFrozen
            - cardExpired
            - cardExpiring
            - cardTinkoff
        gymUid:
          type: string
          format: uuid
          description: идентификатор клуба
        cardUid:
          type: string
          format: uuid
          description: идентификатор клубной карты
        cardName:
          type: string
          description: название клубной карты
      required:
        - title
        - type

    BannerList:
      type: array
      items:
        $ref: "#/components/schemas/Banner"

    AdTargetList:
      type: array
      items:
        $ref: "#/components/schemas/UUID"

    PaymentMethodsResponse:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор заказа
        options:
          $ref: "#/components/schemas/PaymentOptions"
        amount:
          type: number
          format: double
          description: сумма к оплате
        oldPrice:
          type: number
          format: double
          description: старая цена
      required:
        - uid
        - options
        - amount

    PaymentOptions:
      type: array
      items:
        $ref: "#/components/schemas/PaymentOption"

    PaymentOption:
      type: object
      properties:
        owner:
          $ref: "#/components/schemas/Owner"
        card:
          type: array
          items:
            $ref: "#/components/schemas/Card"
        deposits:
          type: array
          items:
            $ref: "#/components/schemas/Deposit"
      required:
        - owner
        - card
        - deposits

    Owner:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор владельца
      required:
        - uid

    Deposit:
      type: object
      properties:
        balance:
          type: number
          format: double
          description: баланс
        canPay:
          type: boolean
          description: возможность выбора оплаты
      required:
        - balance
        - canPay

    Card:
      type: object
      properties:
        uid:
          type: string
          description: Идентификатор платежной системы
        name:
          type: string
          description: Наименование платежной системы
        priority:
          type: boolean
          description: способ оплаты является приоритетным
        type:
          type: string
          description: тип платежной системы
          enum:
            - applePay
            - googlePay
            - bankCard
            - qr
            - mir
            - americanExpress
            - jcb
            - international
            - dinersClub
            - visa
            - masterCard
            - maestro
            - chinaUnionPay
            - discover
            - universalElectronicCard
            - none
      required:
        - uid
        - name
        - type
        - priority

    CreatePaymentAccountResponse:
      type: object
      properties:
        orderId:
          type: string
          description: идентификатор банковской транзакции
        uid:
          type: string
          description: идентификатор заказа
      required:
        - orderId
        - uid

    SelfActivityResponse:
      type: object
      required:
        - activity
      properties:
        activity:
          $ref: "#/components/schemas/SelfActivity"

    SelfActivityCreateResponse:
      type: object
      required:
        - activity
        - objectivePromo
      properties:
        activity:
          $ref: "#/components/schemas/SelfActivity"
        objectivePromo:
          $ref: "#/components/schemas/ObjectivePromo"

    CreatePaymentResponse:
      type: object
      properties:
        orderId:
          type: string
          description: идентификатор банковской транзакции
        paymentUrl:
          type: string
          description: url перехода на страницу оплаты от банка
        uid:
          type: string
          description: идентификатор заказа
      required:
        - orderId
        - paymentUrl
        - uid

    GetPaymentStatusResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - ok
            - fail
            - inProgress
          description: Результат
      required:
        - status

    DocTypeQuery:
      type: string
      enum:
        - invoice
        - personal
        - group
        - package

    GetPaymentHistoryResponse:
      type: object
      required:
        - isLastPage
        - objects
      properties:
        isLastPage:
          type: boolean
          description: Достигнут конец выборки по всем операциям
        objects:
          type: array
          items:
            $ref: "#/components/schemas/PaymentHistory"

    PaymentHistory:
      type: object
      required:
        - dateTime
        - uid
        - label
        - name
        - type
        - recordType
        - amount
        - items
        - payments
        - customerReceipt
      properties:
        dateTime:
          type: string
          format: date-time
          x-go-type: openapi.CustomTime
          description: Дата и время регистрации документа в учетной системе (локальный часовой пояс клуба)
          example: "2022-06-06T12:00:00"
        uid:
          type: string
          description: идентификатор документа
          format: uuid
          example: e762e10f-e667-4cbb-a356-fa227314a241
        label:
          type: string
          description: Представление документа в интерфейсе пользователя
          example: СФ-00051786
        name:
          type: string
          description: Имя объекта метаданных в учетной системе
          example: ОперацияПоПлатежнойКарте
        type:
          type: string
          description: |
            Тип операции
            * `income` - Получение оплаты от покупателя
            * `incomeReturn` - Возврат оплаты покупателю
          enum:
            - income
            - incomeReturn
          example: income
        recordType:
          type: string
          description: |
            Тип движения денежных средств клиента для отображения в интерфейсе
            * `receipt` - Приход (пополнение аванса)
            * `expense` - Расход (оплата товаров и услуг)
          enum:
            - receipt
            - expense
          example: receipt
        amount:
          type: number
          description: сумма документа
          example: 5000
        items:
          type: array
          description: Массив структур (перечень товаров и услуг документа)
          items:
            $ref: "#/components/schemas/PaymentHistoryItem"
        payments:
          type: array
          description: Массив структур (список примененных видов оплаты по документу)
          items:
            $ref: "#/components/schemas/Payment"
        customerReceipt:
          $ref: "#/components/schemas/CustomerReceipt"

    PaymentHistoryItem:
      type: object
      required:
        - label
        - amount
      properties:
        label:
          type: string
          description: Наименование товара или услуги
          example: Поступление на аванс
        amount:
          type: number
          description: Сумма за товар или услугу (цена * количество)
          example: 5000

    Payment:
      type: object
      required:
        - type
        - amount
        - payer
      properties:
        type:
          type: string
          description: |
            - Наличные
            - Безналичные
            - Аванс
          example: 2
        amount:
          type: number
          description: сумма
          example: 5000
        payer:
          type: string
          description: ФИО плательщика, если он отличается от клиента

    CustomerReceipt:
      type: object
      required:
        - documentNumber
        - fiscalSign
        - ofd
        - ofdReceiptUrl
      properties:
        documentNumber:
          type: number
          description: Номер фискального документа
          example: 133199
        fiscalSign:
          type: string
          description: Фискальный признак
          example: 3786590258
        ofd:
          type: string
          description: Наименование ОФД
          example: Такском
        ofdReceiptUrl:
          type: string
          description: Ссылка на сервис проверки чека в ОФД
          example: https://receipt.taxcom.ru/v01/show?fp=3786590258

    UserRating:
      type: object
      properties:
        color:
          description: цвет
          type: string
        current:
          description: текущий рейтинг
          type: boolean
        levelPoints:
          description: количество очков
          type: number
        name:
          description: наименование рейтинга
          type: string
          enum:
            - base
            - bronze
            - silver
            - gold
            - black
            - default
        priority:
          description: порядковый номер рейтинга
          type: integer
        privileges:
          description: список привелегий по рейтингу
          items:
            type: string
          type: array
        uid:
          description: идентификатор рейтинга
          type: string
          format: uuid
      required:
        - priority
        - uid
        - name
        - levelPoints
        - privileges
        - color

    UserRatings:
      type: array
      items:
        $ref: "#/components/schemas/UserRating"

    UserProfileBalanceResponse:
      type: object
      required:
        - balance
      properties:
        balance:
          type: number
          format: double
          description: баланс внутреннего счета

    LinkedAccountsResponse:
      type: object
      required:
        -  linkedAccounts
      properties:
        linkedAccounts:
          type: array
          items:
            $ref: "#/components/schemas/LinkedAccount"

    LinkedAccount:
      type: object
      description: Параметры связанного пользователя
      required:
        - uid
        - firstName
        - lastName
        - secondName
        - relateType
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        firstName:
          type: string
          description: Имя пользователя
        lastName:
          type: string
          description: Фамилия пользователя
        secondName:
          type: string
          description: Отчество
        balance:
          type: number
          format: double
          description: Баланс внутреннего счета
        relateType:
          type: string
          description: Роль пользователя

    ProfileSettingsResponse:
      type: object
      required:
        - smsNotificationEnable
        - emailNotificationEnable
      properties:
        smsNotificationEnable:
          type: boolean
          description: уведомление по СМС
        emailNotificationEnable:
          type: boolean
          description: уведомление по e-mail

    UpdateProfileSettingsResponse:
      $ref: "#/components/schemas/ProfileSettingsResponse"

    UserProfileResponse:
      type: object
      required:
        - registrationDate
        - phone
        - birthdate
        - firstName
        - secondName
        - lastName
        - gender
        - email
        - status
        - canUpdatePersonalData
        - photo
        - rating
        - subscriptionEmail
        - subscriptionSms
        - barcode
        - uid
        - showSupportChat
      properties:
        registrationDate:
          type: string
          format: date-time
          x-go-type: openapi.CustomTime
          example: "2022-06-01T11:00:00"
          description: дата регистрации в ЛК
        phone:
          type: string
          description: телефон
        birthdate:
          type: string
          format: date-time
          x-go-type: openapi.CustomTime
          description: дата рождения
          example: "2000-08-12T00:00:00"
        firstName:
          type: string
          description: имя
        secondName:
          type: string
          description: отчество
        lastName:
          type: string
          description: фамилия
        gender:
          type: string
          description: пол
          enum:
            - male
            - female
            - none
        email:
          type: string
          description: электронная почта
        status:
          type: string
          description: статус пользователя connect
          enum:
            - active
            - missingPersonalData
            - unauthorized
        canUpdatePersonalData:
          type: boolean
          description: Флаг разрешающий обновлять персональные данные
        photo:
          type: string
          description: URL фотографии
        rating:
          type: string
          description: рейтинг
        subscriptionEmail:
          type: boolean
          description: подписка на письма
        subscriptionSms:
          type: boolean
          description: подписка на смс
        balance:
          type: number
          format: double
          description: баланс внутреннего счета
        barcode:
          type: string
          description: штрихкод
        uid:
          type: string
          format: uuid
          description: идентификатор
        personalManager:
          $ref: "#/components/schemas/PersonalManager"
        showSupportChat:
          type: boolean
          description: показывать ли чат поддержки

    UserProfileDocsResponse:
      type: object
      description: Ответ на запрос получения списка документов пользователя
      required:
        - docs
      properties:
        docs:
          type: array
          items:
            $ref: "#/components/schemas/UserProfileDoc"

    UserProfileDoc:
      type: object
      description: Подписанный документ пользователя
      required:
        - printDoc
        - createDate
        - docLink
      properties:
        printDoc:
          type: string
          description: Объект документа
        createDate:
          type: string
          format: date-time
          x-go-type: openapi.CustomTime
          example: "2022-06-01T11:00:00"
          description: Дата регистрации документа
        signDate:
          type: string
          format: date-time
          x-go-type: openapi.CustomTime
          example: "2022-06-01T11:00:00"
          description: Дата подписи документа
        docLink:
          type: string
          description: Ссылка на документ в формате pdf

    UserDocumentResponse:
      type: object
      description: Ответ на запрос получения документа пользователя по контракту (клубной карте)
      required:
        - link
      properties:
        link:
          type: string
          description: ссылка на документ

    UserObjective:
      type: object
      properties:
        uid:
          type: string
          description: "идентификатор цели"
        name:
          type: string
          description: наименование
        description:
          type: string
          description: описание цели
        shortDescription:
          type: string
          description: краткое описание
        order:
          type: number
          format: double
          description: порядок для сортировки
        actual:
          type: boolean
        image:
          type: string
          description: главное фото
          example: https://i.ibb.co/frq8rzV/image-20220609-083750.png
        photos:
          type: array
          items:
            type: string
            description: ссылка на фото
        videos:
          type: array
          items:
            type: string
            description: ссылка на видео
        color:
          type: string
          description: цвет
      required:
        - uid
        - name
        - description
        - shortDescription
        - order
        - actual
        - photos
        - videos
        - color

    PersonalManager:
      type: object
      properties:
        photo:
          type: string
          description: URL фотографии
        lastName:
          type: string
          description: фамилия
        firstName:
          type: string
          description: имя
        secondName:
          type: string
          description: отчество
        phone:
          type: string
          description: телефон
        email:
          type: string
          description: электронная почта

    UserObjectives:
      type: array
      items:
        $ref: "#/components/schemas/UserObjective"

    UserShortObjective:
      type: object
      properties:
        uid:
          type: string
          description: "идентификатор цели"
        name:
          type: string
          description: наименование
        color:
          type: string
          description: цвет
      required:
        - uid
        - name
        - color

    UserShortObjectives:
      type: array
      items:
        $ref: "#/components/schemas/UserShortObjective"

    SetUserObjectiveResponse:
      type: object
      properties:
        result:
          type: string
          description: результат запроса
          enum:
            - ok
            - fail

    BindCard:
      type: object
      properties:
        formUrl:
          description: url перехода на страницу оплаты от банка
          type: string
        orderId:
          description: идентификатор банковской транзакции
          type: string
      required:
        - orderId
        - formUrl

    ServiceType:
      type: string
      enum:
        - personal
        - group

    ServiceSetType:
      type: string
      enum:
        - clip-card
        - package

    EventBanner:
      type: object
      required:
        - uid
        - name
        - photo
        - registrationLink
        - registered
        - eventStart
      properties:
        uid:
          description: идентификатор мероприятия (Справочник.Игры.ГУИД)
          type: string
          format: uuid
        name:
          description: наименование мероприятия
          type: string
        eventStart:
          description: время начала мероприятия
          example: "2019-07-01"
          x-go-type: openapi.CustomTime
          format: date-time
          type: string
        eventEnd:
          description: время окончания мероприятия
          example: "2019-07-01"
          x-go-type: openapi.CustomTime
          format: date-time
          type: string
        registered:
          type: boolean
          description: клиент зарегистрирован на мероприятие / категорию мероприятия
        photo:
          type: string
          description: фото
        registrationLink:
          type: string
          description: Ссылка на карточку мероприятия

    Entry:
      type: object
      properties:
        uid:
          description: идентификатор услуги
          type: string
        name:
          description: наименование услуги
          type: string
        shortDescription:
          description: краткое описание услуги
          type: string
        entryType:
          description: тип услуги
          type: string
          enum:
            - personal
            - group
            - course
            - lesson
        duration:
          description: длительность услуги
          type: number
          format: double
        employeeKind:
          description: категория сотрудника
          type: string
        photo:
          description: фото
          type: string
      required:
        - uid
        - entryType

    EntryList:
      type: array
      description: состав услуги/сегмента
      items:
        $ref: "#/components/schemas/Entry"

    EventService:
      description: услуга/сегмент
      type: object
      properties:
        name:
          description: наименование услуги/сегмента
          type: string
        serviceType:
          description: тип объекта - услуга или сегмент
          type: string
          enum:
            - service
            - package
        quantity:
          description: количество услуг/сегментов
          type: integer
        entryList:
          $ref: "#/components/schemas/EntryList"
      required:
        - name
        - serviceType
        - quantity
        - entryList

    EventServiceCard:
      type: object
      properties:
        service:
          $ref: "#/components/schemas/EventService"
        debt:
          description: флаг ожидания оплаты
          type: boolean
        amount:
          description: сумма к оплате
          type: number
          format: double
        uid:
          description: идентификатор описания услуги
          type: string
      required:
        - service
        - debt
        - uid

    EventGym:
      description: клуб
      type: object
      properties:
        uid:
          description: идентификатор клуба
          type: string
        name:
          description: наименование клуба
          type: string
        phone:
          description: номер телефона клуба
          type: string
      required:
        - uid
        - name
        - phone

    EventRoom:
      description: помещение
      type: object
      properties:
        uid:
          description: идентификатор помещения
          type: string
        name:
          description: наименование помещения
          type: string
      required:
        - uid
        - name

    EventEmployee:
      type: object
      description: сотрудник
      properties:
        uid:
          description: идентификатор сотрудника
          type: string
        firstName:
          description: имя сотрудника
          type: string
        lastName:
          description: фамилия сотрудника
          type: string
        cashlessTips:
          type: boolean
          description: доступна ли возможность оставить чаевые сотруднику
        code:
          type: string
          description: код сотрудника
          example: "017708"
      required:
        - uid
        - firstName
        - lastName
        - cashlessTips
        - code

    EventAdditionalParameter:
      description: дополнительные параметры
      type: object
      properties:
        onlyMembers:
          description: флаг - только для членов клуба
          type: boolean
        onlyWithParents:
          description: флаг - при обязательном участии родителей
          type: boolean
        isPrePaid:
          description: флаг - по предоплате
          type: boolean
        isPreBooked:
          description: флаг - по предварительной записи
          type: boolean
        studentLevel:
          description: уровень подготовки
          type: string
        ageMin:
          description: минимальный возраст (месяц)
          type: number
          format: double
        ageMax:
          description: максимальный возраст (месяц)
          type: number
          format: double
      required:
        - onlyMembers
        - onlyWithParents
        - isPrePaid
        - isPreBooked
        - studentLevel
        - ageMin
        - ageMax

    EventExternalRefs:
      type: object
      properties:
        type:
          type: string
        ref:
          type: string
      required:
        - type
        - ref

    ObjectivePromo:
        description: Информация по онбордингу
        type: object
        properties:
          isObjectivePromoNeed:
            description: Флаг необходимости онбординга
            type: boolean

    SelfActivity:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/SelfActivityType"
        location:
          $ref: "#/components/schemas/SelfActivityLocation"
        distance:
          $ref: "#/components/schemas/SelfActivityDistance"
        duration:
          $ref: "#/components/schemas/SelfActivityExerciseDuration"
        startDate:
          description: время начала
          example: "2019-07-01T10:00:00"
          format: date-time
          x-go-type: openapi.CustomTime
          type: string
        endDate:
          description: время окончания
          example: "2019-07-01T10:00:00"
          format: date-time
          x-go-type: openapi.CustomTime
          type: string
        objectiveList:
          type: array
          items:
            $ref: "#/components/schemas/UserShortObjective"
      required:
        - objectiveList
        - duration
        - startDate
        - endDate
        - location

    SelfActivityCreate:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/SelfActivityType"
        location:
          $ref: "#/components/schemas/SelfActivityLocation"
        distance:
          $ref: "#/components/schemas/SelfActivityDistance"
        duration:
          $ref: "#/components/schemas/SelfActivityExerciseDuration"
        startDate:
          description: время начала
          example: "2019-07-01T10:00:00"
#          format: date-time
#          x-go-type: openapi.CustomTime
          type: string
        objectiveID:
          description: Идентификатор цели пользователя
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          maxLength: 36
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
      required:
        - location
        - duration
        - startDate
        - objectiveID

    SelfActivityType:
      description: Тип самостоятельной активности
      type: string
      enum:
        - strength
        - cardio
        - running
        - functional
        - dancing
        - yoga
        - pilates
        - game
        - pool

    SelfActivityLocation:
      description: Место проведения тренировки
      type: string
      example: "outdoor"
      enum:
        - gym
        - outdoor
        - home

    SelfActivityDistance:
      description: Преодоленное расстояние
      type: number
      format: double
      default: 0.0
      example: 1.2

    SelfActivityExerciseDuration:
        description: Длительность тренировки в минутах
        type: integer
        minimum: 1
        example: 60
        default: 60

    EventInfo:
      type: object
      properties:
        price:
          description: цена за услугу
          type: number
          format: double
        serviceList:
          description: Список услуг
          type: array
          items:
            $ref: "#/components/schemas/EventServiceCard"
        startDate:
            description: время начала
            example: "2019-07-01T10:00:00"
            format: date-time
            x-go-type: openapi.CustomTime
            type: string
        endDate:
            description: время окончания
            example: "2019-07-01T10:00:00"
            format: date-time
            x-go-type: openapi.CustomTime
            type: string
        gym:
          $ref: "#/components/schemas/EventGym"
        room:
          $ref: "#/components/schemas/EventRoom"
        employee:
          $ref: "#/components/schemas/EventEmployee"
        additionalParameter:
          $ref: "#/components/schemas/EventAdditionalParameter"
        docId:
          description: идентификатор документа
          type: string
        docType:
          description: тип документа
          type: string
          enum:
            - personal
            - group
            - visit
            - guestVisit
        duration:
          description: длительность (мин)
          type: number
          format: double
        canCancel:
          description: флаг - возможность отмены
          type: boolean
        urlZoom:
          description: ссылка на Zoom
          type: string
        objectives:
          type: array
          items:
            $ref: "#/components/schemas/UserShortObjective"
        paymentStatus:
          $ref: "#/components/schemas/PaymentStatus"
        onlineRefs:
          description: список ссылок
          type: array
          items:
            $ref: "#/components/schemas/ScheduleOnlineRef"
        externalRefs:
          description: список ссылок
          type: array
          items:
            $ref: "#/components/schemas/EventExternalRefs"
      required:
        - serviceList
        - startDate
        - endDate
        - docId
        - docType
        - duration
        - canCancel
        - urlZoom
        - objectives
        - paymentStatus
        - onlineRefs
        - externalRefs

    EventGame:
      type: object
      properties:
        uid:
          description: идентификатор мероприятия (Справочник.Игры.ГУИД)
          type: string
          format: uuid
        name:
          description: наименование мероприятия
          type: string
        eventStart:
          description: время начала мероприятия
          example: "2019-07-01T10:00:00"
          format: date-time
          x-go-type: openapi.CustomTime
          type: string
        eventEnd:
          description: время окончания мероприятия
          example: "2019-07-01T12:00:00"
          format: date-time
          x-go-type: openapi.CustomTime
          type: string
        eventPlace:
          description: место проведения мероприятия
          type: string
        description:
          description: описание мероприятия
          type: string
        photo:
          type: string
          description: фото
        registrationLink:
          type: string
        tags:
          type: array
          description: список тегов
          items:
            type: string
        registered:
          type: boolean
          description: клиент зарегистрирован на мероприятие / категорию мероприятия
        registrationIsAvailable:
          type: boolean
          description: доступна регистрация клиента на мероприятие / категорию мероприятия
      required:
        - uid
        - name
        - eventStart
        - eventEnd
        - eventPlace
        - description
        - photo
        - registrationLink
        - tags
        - registered
        - registrationIsAvailable

    EventGames:
      description: массив с данными игр
      type: array
      items:
        $ref: "#/components/schemas/EventGame"

    EventList:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        events:
          $ref: "#/components/schemas/EventGames"
      required:
        - events
        - tags

    PaymentStatus:
      type: string
      description: |
        * inProgress - Оплата в обработке
        * debt - Не оплачено
        * paid - Оплачено
        * free - Не требует оплаты(если прайс = 0)
        * forPay - Платно(если прайс > 0)
      enum:
        - inProgress
        - debt
        - paid
        - free
        - forPay

    PushType:
      type: string
      description: тип отправляемого пуш-уведомления
      enum:
        - paymentSuccess
        - bindCardSuccess
        - feedbackService
        - debt

    FeedbackDataItem:
      type: object
      description: данные для заполнения обратной связи конкретным пользователем
      required:
        - userId
        - title
        - text
        - feedbacks
      properties:
        userId:
          type: string
          format: uuid
          description: id клиента
          example: "af95922c-82ea-11ea-bc0a-005056b15dcf"
        title:
          description: Заголовок уведомления
          type: string
          example: Весенняя акция
        text:
          description: Текст уведомления
          type: string
          example: Акция для всех владельцев абонементов
        feedbacks:
          type: array
          items:
            $ref: "#/components/schemas/Feedback"

    Feedback:
      type: object
      required:
        - type
        - visit
        - gym
      properties:
        type:
          type: string
          description: тип фидбэка
          enum:
            - service
            - gym
            - spa
        visit:
          $ref: "#/components/schemas/Visit"
        employee:
          $ref: "#/components/schemas/Employee"
        gym:
          $ref: "#/components/schemas/GymFromFeedback"

    GymFromFeedback:
      type: object
      required:
        - id
        - name
        - address
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
          description: наименование клуба
        address:
          type: string
          description: адрес клуба
          example: "Русаковская 31"

    Employee:
      type: object
      description: информация о сотруднике, который оказывал услугу
      required:
        - id
        - firstname
        - lastname
      properties:
        id:
          type: string
          format: uuid
          description: id сотрудника
          example: "c72c20a1-f151-11e8-82f5-005056b12219"
        firstname:
          type: string
          description: имя тренера
          minLength: 1
          example: "Егор"
        lastname:
          type: string
          description: фамилия тренера
          minLength: 1
          example: "Летов"
        image:
          type: string
          description: ссылка на фото сотрудника
        cashlessTips:
          type: boolean
          description: доступна ли возможность оставить чаевые сотруднику
        code:
          type: string
          description: код сотрудника
          example: "017708"
    Visit:
      type: object
      description: информация об объекте для обратной связи после посещения (тренировки, услуги, клуба в зависимости от типа)
      required:
        - id
        - datetime
        - name
      properties:
        id:
          type: string
          format: uuid
          description: id объекта
          example: "422f29ec-c067-11ec-bcea-005056b122e0"
        name:
            type: string
            description: название события
            minLength: 1
            example: "Школа шпагата"
        image:
            type: string
            description: ссылка на изображение
        datetime:
            type: string
            format: date-time
            description: дата и время посещения
            x-go-type: openapi.CustomTime
            example: "2022-06-10T00:00:00"

    ServiceOnboardEntryList:
      type: object
      properties:
        duration:
          description: длительность услуги
          type: number
          example: 10
        trainerKind:
          description: категория сотрудника
          type: string
          example: fitness
        entryType:
          description: >-
            Тип услуги: персональная тренировка или групповой урок или курс
            или урок
          enum:
            - personal
            - group
            - course
            - lesson
          type: string
        name:
          description: Наименование услуги
          type: string
        photo:
          description: фотография
          type: string
        shortDescription:
          description: Краткое описание услуги
          type: string
        uid:
          description: Идентификатор услуги
          format: uuid
          type: string
      required:
        - uid
        - entryType

    ServiceOnboard:
      description: Услуга/сегмент
      properties:
        entryList:
          type: array
          description: Состав услуги/сегмента
          items:
            $ref: "#/components/schemas/ServiceOnboardEntryList"
        name:
          description: Наименование услуги/сегмента
          type: string
        quantity:
          description: Количество услуг/сегментов
          type: integer
        serviceType:
          description: 'тип объекта: услуга или сегмент'
          enum:
            - service
            - package
          type: string
        gymUid:
          description: Идентификатор клуба
          type: string
          format: uuid
        gymName:
          description: Наименование клуба
          type: string
      required:
        - name
        - serviceType
        - entryList
        - gymUid
      type: object

    Gift:
      type: object
      properties:
        description:
          description: описание подарка
          type: string
        name:
          description: наименование подарка
          type: string
        photo:
          description: URL фотографии
          type: string
        quantity:
          description: количество
          type: integer
        type:
          description: тип подарка
          enum:
            - service
            - discount
            - bonus
            - freezing
            - membership
            - access
          type: string
        uid:
          description: идентификатор подарка
          type: string
          format: uuid
        gymUid:
          description: Идентификатор клуба
          type: string
          format: uuid
        gymName:
          description: Наименование клуба
          type: string
      required:
        - uid
        - name
        - description
        - quantity
        - photo
        - type
        - gymUid

    Onboard:
      type: object
      properties:
        giftList:
          type: array
          description: список подарков по абонементу
          items:
            $ref: "#/components/schemas/Gift"
        serviceList:
          type: array
          description: список услуг включенных в абонемент
          items:
            $ref: "#/components/schemas/ServiceOnboard"
        clubNames:
          type: array
          description: список названий клубов со стартовыми тренировками
          items:
            type: string
      required:
        - serviceList
        - giftList
        - clubNames

    UnreadNotificationsCount:
      type: object
      properties:
        infoCount:
          type: integer
          example: 0
          nullable: true
        feedbackCount:
          type: integer
          example: 0
          nullable: true

    NotificationInfo:
      type: object
      properties:
        id:
          type: string
          description: идентификатор уведомления
        date:
          type: string
          description: дата регистрации уведомления
        title:
          type: string
          description: заголовок
        text:
          type: string
          description: текст уведомления
        read:
          type: boolean
          description: уведомление прочитано
        objectId:
          type: string
          description: 'идентификатор объекта '
        objectType:
          type: string
          description: тип объекта
      required:
        - id
        - date
        - title
        - text
        - read
        - objectId
        - objectType

    FeedbackResponse:
      type: object
      required:
        - id
        - type
        - visit
      properties:
        id:
          type: string
          format: uuid
          description: id объекта
          example: "422f29ec-c067-11ec-bcea-005056b122e0"
        type:
          type: string
          description: тип фидбэка
          enum:
            - service
            - gym
            - spa
        visit:
          $ref: "#/components/schemas/Visit"
        employee:
          $ref: "#/components/schemas/Employee"

    StatusOk:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          example: "Ok"

    FeedbackRate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: id опроса
          example: "422f29ec-c067-11ec-bcea-005056b122e0"
        rate:
          type: integer
          minimum: 0
          maximum: 5
      required:
        - id
        - rate

    SetObjective:
      type: object
      properties:
        uid:
          description: идентификатор цели
          type: string
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
        name:
          description: наименование цели
          type: string
        actual:
          description: актуальность цели
          type: boolean
      required:
        - uid
        - name
        - actual

    Direction:
      type: string
      description: Категория направление бизнеса
      enum:
        - fitness
        - spa

    PartDay:
      type: string
      description: >
        Типы:
          * `MORNING`
          * `AFTERNOON`
          * `EVENING`
          * `ALL`
      enum:
        - MORNING
        - AFTERNOON
        - EVENING
        - ALL

    PaymentTypeFilters:
      type: array
      items:
        $ref: "#/components/schemas/PaymentType"

    PaymentType:
      type: string
      description: >
        Типы оплаты:
          * `FREE`
          * `PAID`
          * `ALL` - эквивалентно незаданному фильтру
      enum:
        - FREE
        - PAID
        - ALL

    PaymentScheduleList:
      type: object
      properties:
          amount:
            description: оставшаяся сумма платежа
            type: number
            format: double
          date:
            description: дата платежа
            format: date-time
            type: string
      required:
            - date
            - amount

    UserMembershipGym:
      type: object
      properties:
        uid:
          type: string
          description: идентификатор клуба
          minLength: 36
          maxLength: 36
          format: uuid
          example: 4f1225f6-cb40-11e9-bba8-005056b11c47
        name:
          type: string
          description: наименование клуба
          example: "Sport Day"
        chainCode:
          type: integer
        type:
          type: string
          enum:
            - gym
            - online
            - studio
            - outdoor
          description: тип клуба
          example: "gym"
        address:
          type: string
          description: адрес клуба
          example: "Русаковская 31"
        segment:
          $ref: "#/components/schemas/Segment"
        coords:
          $ref: "#/components/schemas/Coords"
        metro:
          type: array
          items:
            $ref: "#/components/schemas/Metro"
        phone:
          type: string
          description: основной телефон клуба
          example: "89996664433"
        hasAccess:
          type: boolean
          description: "есть доступ, для не авторизованного клиента null"
        main:
          description: является ли клуб в абонементе основным
          type: boolean
          default: false
        photo:
          type: string
          description: основное фото клуба
          example: https://foto.com
        weekdaysTime:
          description: время работы в будни
          type: string
        holidaysTime:
          description: время  работы в выходные и праздники
          type: string

      required:
        - uid
        - name
        - main
        - hasAccess
        - type
        - address
        - segment
        - coords
        - phone
        - photo
        - weekdaysTime
        - holidaysTime
        - chainCode

    UserMembership:
      type: object
      properties:
        activationDate:
          description: Дата автоактивации абонемента
          format: date-time
          type: string
        canPurchaseFreezing:
          description: возможность приобретения заморозки
          type: boolean
        code:
          description: номер/код абонемента
          type: string
        duration:
          description: длительность
          type: integer
        endDate:
          description: дата окончания действия абонемента
          format: date-time
          type: string
        freezing:
          description: количество оставшихся дней заморозки
          type: integer
        freezingEndDate:
          description: дата окончания заморозки
          format: date-time
          type: string
        freezingStartDate:
          description: дата начала заморозки
          format: date-time
          type: string
        gymList:
          description: список клубов доступа
          type: array
          items:
            $ref: '#/components/schemas/UserMembershipGym'
        name:
          description: наименование абонемента
          type: string
        paymentSchedule:
          description: график платежей
          type: array
          items:
            $ref: '#/components/schemas/PaymentScheduleList'
        photo:
          description: URL фотографии
          type: string
        serviceQuantity:
          description: 'количество услуг, включенных в абонемент'
          type: number
        shortDescription:
          description: краткое описание абонемента
          type: string
        shortDiscription:
          deprecated: true
          description: краткое описание абонемента
          type: string
        startDate:
          description: дата начала действия абонемента
          format: date-time
          type: string
        expiration:
          type: boolean
          description: флаг о скором окончании действия абонемента
        status:
          description: Статус абонемента
          enum:
            - active
            - frozen
            - paused
            - inactive
            - locked
            - pending
            - expired
            - waiting
            - signingForTinkoff
          type: string
        uid:
          description: идентификатор абонемента
          type: string
          format: uuid
        useType:
          description: тип использования абонемента
          enum:
            - forUse
            - forTransfer
          type: string
        experience:
          type: string
          description: стаж клиента
          enum:
            - New
            - Renew
            - Ex
        minFreezingAmount:
          type: number
          format: double
          description: Минимальное количество дней для новой заморозки
        maxFreezingAmount:
          type: number
          format: double
          description: Максимальное количество дней для новой заморозки
        canFreezing:
          type: boolean
          description: может ли быть заморожен
      required:
        - uid
        - code
        - name
        - status
        - duration
        - serviceQuantity
        - photo
        - useType
        - gymList
        - paymentSchedule
        - canPurchaseFreezing
        - experience
        - freezing
        - minFreezingAmount
        - maxFreezingAmount
        - canFreezing
        - shortDescription
        - shortDiscription

    UserMembershipDetails:
      allOf:
        - $ref: '#/components/schemas/UserMembership'
        - type: object
          properties:
            giftList:
              type: array
              description: список подарков по абонементу
              items:
                $ref: '#/components/schemas/Gift'
            serviceList:
              type: array
              description: список услуг включенных в абонемент
              items:
                $ref: '#/components/schemas/ServiceOnboard'
            termsOfUseState:
              type: string
              enum:
                - show
                - available
                - unavailable
          required:
            - serviceList
            - giftList
            - termsOfUseState

    UserMemberships:
      type: array
      items:
        $ref: '#/components/schemas/UserMembership'

    GetDebtService:
      type: object
      properties:
        count:
          type: integer
      required:
        - count

    UUID:
      description: Уникальный идентификатор
      type: string
      minLength: 36
      maxLength: 36
      pattern: ^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$
      example: "76dd5eb8-c235-41bb-8c10-227ed07bcc45"

    Limit:
      description: Количество записей
      type: integer
      example: 10
    Offset:
      description: Смещение выборки записей, обычно кратно лимиту
      type: integer
      example: 10

    StoryCategory:
      required:
        - id
        - name
        - isViewed
        - previewUrl
        - publications
      description: Набор сторис и информация о категории
      properties:
        id:
          description: Идентификатор категории
          type: integer
        name:
          description: Название категории
          type: string
        isViewed:
          description: Просмотрена ли категория
          type: boolean
        previewUrl:
          description: Адрес превью картинки
          type: string
        publications:
          description: Список публикаций в категории
          type: array
          items:
            $ref: "#/components/schemas/StoryPublication"
      example:
        id: 1337
        name: Категория 1
        previewUrl: "https://localhost/preview.png"
        isViewed: true
        publications:
          - id: 1243
            name: Стори 1
            imageUrl: https://localhost/img
            videoUrl: https://localhost/video
            shortDescription: Короткое описание
            link: https://localhost/button-link
            button:
              link: https://localhost/button-link
              label: Нажми меня!
            displayTime: 300
            isLiked: true

    StoryPublication:
      required:
        - id
        - name
        - shortDescription
        - displayTime
        - isLiked
      description: Отдельная публикация. Приходит только внутри категории
      properties:
        id:
          description: Идентификатор публикации
          type: integer
        name:
          description: Название публикации
          type: string
        imageUrl:
          description: Ссылка на изображение
          type: string
          format: uri
        videoUrl:
          description: Ссылка на видео
          type: string
          format: uri
        shortDescription:
          description: Краткое описание публикации
          type: string
        button:
          $ref: "#/components/schemas/StoryButton"
        displayTime:
          description: Время показа публикации
          type: integer
        isLiked:
          description: Понравилась ли публикация
          type: boolean
      example:
        id: 1234
        name: Стори 1
        imageUrl: https://localhost/img
        videoUrl: https://localhost/video
        shortDescription: Короткое описание
        button:
          link: https://localhost/button-link
          label: Нажми меня!
        displayTime: 300
        isLiked: true

    StoryButton:
      type: object
      description: Кнопка действия
      required:
        - link
        - label
      properties:
        link:
          type: string
        label:
          type: string

    SystemStatus:
      type: object
      description: Состояние системы
      properties:
        status:
          type: string
          enum:
            - RED
            - YELLOW
            - GREEN
          example: GREEN
        message:
          type: string
          description: сообщение для пользователя
          example: Скоро все починим
        phone:
          type: string
          description: телефон службы поддержки
      required:
        - status
        - message
        - phone

